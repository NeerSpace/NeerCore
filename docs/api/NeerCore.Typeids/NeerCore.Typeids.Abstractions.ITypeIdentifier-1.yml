### YamlMime:ManagedReference
items:
- uid: NeerCore.Typeids.Abstractions.ITypeIdentifier`1
  commentId: T:NeerCore.Typeids.Abstractions.ITypeIdentifier`1
  id: ITypeIdentifier`1
  parent: NeerCore.Typeids.Abstractions
  children:
  - NeerCore.Typeids.Abstractions.ITypeIdentifier`1.Value
  langs:
  - csharp
  - vb
  name: ITypeIdentifier<TValue>
  nameWithType: ITypeIdentifier<TValue>
  fullName: NeerCore.Typeids.Abstractions.ITypeIdentifier<TValue>
  type: Interface
  source:
    remote:
      path: src/NeerCore.Typeids/Abstractions/ITypeIdentifier.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: ITypeIdentifier
    path: ../src/NeerCore.Typeids/Abstractions/ITypeIdentifier.cs
    startLine: 2
  assemblies:
  - NeerCore.Typeids
  namespace: NeerCore.Typeids.Abstractions
  syntax:
    content: public interface ITypeIdentifier<out TValue>
    typeParameters:
    - id: TValue
    content.vb: Public Interface ITypeIdentifier(Of Out TValue)
  nameWithType.vb: ITypeIdentifier(Of TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NeerCore.Typeids.Abstractions.ITypeIdentifier(Of TValue)
  name.vb: ITypeIdentifier(Of TValue)
- uid: NeerCore.Typeids.Abstractions.ITypeIdentifier`1.Value
  commentId: P:NeerCore.Typeids.Abstractions.ITypeIdentifier`1.Value
  id: Value
  parent: NeerCore.Typeids.Abstractions.ITypeIdentifier`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ITypeIdentifier<TValue>.Value
  fullName: NeerCore.Typeids.Abstractions.ITypeIdentifier<TValue>.Value
  type: Property
  source:
    remote:
      path: src/NeerCore.Typeids/Abstractions/ITypeIdentifier.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Value
    path: ../src/NeerCore.Typeids/Abstractions/ITypeIdentifier.cs
    startLine: 4
  assemblies:
  - NeerCore.Typeids
  namespace: NeerCore.Typeids.Abstractions
  syntax:
    content: TValue Value { get; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: ReadOnly Property Value As TValue
  overload: NeerCore.Typeids.Abstractions.ITypeIdentifier`1.Value*
  nameWithType.vb: ITypeIdentifier(Of TValue).Value
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NeerCore.Typeids.Abstractions.ITypeIdentifier(Of TValue).Value
references:
- uid: NeerCore.Typeids.Abstractions
  commentId: N:NeerCore.Typeids.Abstractions
  name: NeerCore.Typeids.Abstractions
  nameWithType: NeerCore.Typeids.Abstractions
  fullName: NeerCore.Typeids.Abstractions
- uid: NeerCore.Typeids.Abstractions.ITypeIdentifier`1.Value*
  commentId: Overload:NeerCore.Typeids.Abstractions.ITypeIdentifier`1.Value
  name: Value
  nameWithType: ITypeIdentifier<TValue>.Value
  fullName: NeerCore.Typeids.Abstractions.ITypeIdentifier<TValue>.Value
  nameWithType.vb: ITypeIdentifier(Of TValue).Value
  fullName.vb: NeerCore.Typeids.Abstractions.ITypeIdentifier(Of TValue).Value
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  commentId: '!:TValue'
  name: TValue
  nameWithType: TValue
  fullName: TValue
