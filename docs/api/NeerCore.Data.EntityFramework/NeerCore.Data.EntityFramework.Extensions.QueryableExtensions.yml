### YamlMime:ManagedReference
items:
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  commentId: T:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  id: QueryableExtensions
  parent: NeerCore.Data.EntityFramework.Extensions
  children:
  - NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},CancellationToken)
  - NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},CancellationToken)
  - NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},System.String,CancellationToken)
  - NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},System.String,CancellationToken)
  - NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany``1(IQueryable{``0},System.String[])
  langs:
  - csharp
  - vb
  name: QueryableExtensions
  nameWithType: QueryableExtensions
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  type: Class
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: QueryableExtensions
    path: ../src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
    startLine: 7
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  syntax:
    content: 'public static class QueryableExtensions : object'
    content.vb: >-
      Public Module QueryableExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},CancellationToken)
  commentId: M:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},CancellationToken)
  id: FirstOr404Async``1(IQueryable{``0},CancellationToken)
  isExtensionMethod: true
  parent: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstOr404Async<TEntity>(IQueryable<TEntity>, CancellationToken)
  nameWithType: QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, CancellationToken)
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, CancellationToken)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FirstOr404Async
    path: ../src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
    startLine: 18
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  summary: "\nReturns the first element of a sequence, or throws a\n<xref href=\"NeerCore.Exceptions.NotFoundException\" data-throw-if-not-resolved=\"false\"></xref> if the sequence contains no elements.\n"
  example: []
  syntax:
    content: >-
      public static async Task<TEntity> FirstOr404Async<TEntity>(this IQueryable<TEntity> source, CancellationToken cancel = null)
          where TEntity : class, IEntity
    parameters:
    - id: source
      type: IQueryable{{TEntity}}
      description: The source query.
    - id: cancel
      type: CancellationToken
      description: Cancellation token
    typeParameters:
    - id: TEntity
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>. Must be a type that implements <xref href="NeerCore.Data.Abstractions.IEntity" data-throw-if-not-resolved="false"></xref> interface.
    return:
      type: Task{{TEntity}}
      description: Found entity or throws 404 exception.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOr404Async(Of TEntity As {Class, IEntity})(source As IQueryable(Of TEntity), cancel As CancellationToken = Nothing) As Task(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async*
  exceptions:
  - type: NeerCore.Exceptions.NotFoundException`1
    commentId: T:NeerCore.Exceptions.NotFoundException`1
    description: <code data-dev-comment-type="paramref" class="paramref">source</code> is empty.
  nameWithType.vb: QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), CancellationToken)
  name.vb: FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), CancellationToken)
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},System.String,CancellationToken)
  commentId: M:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},System.String,CancellationToken)
  id: FirstOr404Async``1(IQueryable{``0},System.String,CancellationToken)
  isExtensionMethod: true
  parent: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstOr404Async<TEntity>(IQueryable<TEntity>, String, CancellationToken)
  nameWithType: QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, String, CancellationToken)
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, System.String, CancellationToken)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FirstOr404Async
    path: ../src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
    startLine: 27
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  example: []
  syntax:
    content: >-
      public static async Task<TEntity> FirstOr404Async<TEntity>(this IQueryable<TEntity> source, string errorMessage, CancellationToken cancel = null)
          where TEntity : class, IEntity
    parameters:
    - id: source
      type: IQueryable{{TEntity}}
    - id: errorMessage
      type: System.String
      description: The error message that will be threw instead of the default one when an exception occurs.
    - id: cancel
      type: CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: Task{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOr404Async(Of TEntity As {Class, IEntity})(source As IQueryable(Of TEntity), errorMessage As String, cancel As CancellationToken = Nothing) As Task(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async*
  nameWithType.vb: QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), String, CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), System.String, CancellationToken)
  name.vb: FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), String, CancellationToken)
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},CancellationToken)
  commentId: M:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},CancellationToken)
  id: FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},CancellationToken)
  isExtensionMethod: true
  parent: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstOr404Async<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, CancellationToken)
  nameWithType: QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, CancellationToken)
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, System.Boolean>>, CancellationToken)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FirstOr404Async
    path: ../src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
    startLine: 36
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  example: []
  syntax:
    content: >-
      public static async Task<TEntity> FirstOr404Async<TEntity>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, CancellationToken cancel = null)
          where TEntity : class, IEntity
    parameters:
    - id: source
      type: IQueryable{{TEntity}}
    - id: predicate
      type: Expression{Func{{TEntity},System.Boolean}}
      description: A function to test each element for a condition.
    - id: cancel
      type: CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: Task{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOr404Async(Of TEntity As {Class, IEntity})(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), cancel As CancellationToken = Nothing) As Task(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async*
  nameWithType.vb: QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, System.Boolean)), CancellationToken)
  name.vb: FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},System.String,CancellationToken)
  commentId: M:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},System.String,CancellationToken)
  id: FirstOr404Async``1(IQueryable{``0},Expression{Func{``0,System.Boolean}},System.String,CancellationToken)
  isExtensionMethod: true
  parent: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstOr404Async<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, String, CancellationToken)
  nameWithType: QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, Boolean>>, String, CancellationToken)
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async<TEntity>(IQueryable<TEntity>, Expression<Func<TEntity, System.Boolean>>, System.String, CancellationToken)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FirstOr404Async
    path: ../src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
    startLine: 46
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  example: []
  syntax:
    content: >-
      public static async Task<TEntity> FirstOr404Async<TEntity>(this IQueryable<TEntity> source, Expression<Func<TEntity, bool>> predicate, string errorMessage, CancellationToken cancel = null)
          where TEntity : class, IEntity
    parameters:
    - id: source
      type: IQueryable{{TEntity}}
    - id: predicate
      type: Expression{Func{{TEntity},System.Boolean}}
      description: A function to test each element for a condition.
    - id: errorMessage
      type: System.String
      description: The error message that will be threw instead of the default one when an exception occurs.
    - id: cancel
      type: CancellationToken
    typeParameters:
    - id: TEntity
    return:
      type: Task{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOr404Async(Of TEntity As {Class, IEntity})(source As IQueryable(Of TEntity), predicate As Expression(Of Func(Of TEntity, Boolean)), errorMessage As String, cancel As CancellationToken = Nothing) As Task(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async*
  nameWithType.vb: QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, System.Boolean)), System.String, CancellationToken)
  name.vb: FirstOr404Async(Of TEntity)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, Boolean)), String, CancellationToken)
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany``1(IQueryable{``0},System.String[])
  commentId: M:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany``1(IQueryable{``0},System.String[])
  id: IncludeMany``1(IQueryable{``0},System.String[])
  isExtensionMethod: true
  parent: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions
  langs:
  - csharp
  - vb
  name: IncludeMany<TEntity>(IQueryable<TEntity>, String[])
  nameWithType: QueryableExtensions.IncludeMany<TEntity>(IQueryable<TEntity>, String[])
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany<TEntity>(IQueryable<TEntity>, System.String[])
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: IncludeMany
    path: ../src/NeerCore.Data.EntityFramework/Extensions/QueryableExtensions.cs
    startLine: 62
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  summary: "\nSpecifies related entities to include in the query results.\nThe navigation property to be included is specified starting with\nthe type of entity being queried (TEntity). Further navigation\nproperties to be included can be appended, separated by the &apos;.&apos; character.\n"
  example: []
  syntax:
    content: >-
      public static IQueryable<TEntity> IncludeMany<TEntity>(this IQueryable<TEntity> source, params string[] inclusions)
          where TEntity : class, IEntity
    parameters:
    - id: source
      type: IQueryable{{TEntity}}
      description: The source query.
    - id: inclusions
      type: System.String[]
      description: A list of strings of &apos;.&apos; separated navigation property names to be included.
    typeParameters:
    - id: TEntity
      description: Entity type that implements <xref href="NeerCore.Data.Abstractions.IEntity" data-throw-if-not-resolved="false"></xref> interface.
    return:
      type: IQueryable{{TEntity}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IncludeMany(Of TEntity As {Class, IEntity})(source As IQueryable(Of TEntity), ParamArray inclusions As String()) As IQueryable(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany*
  nameWithType.vb: QueryableExtensions.IncludeMany(Of TEntity)(IQueryable(Of TEntity), String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany(Of TEntity)(IQueryable(Of TEntity), System.String())
  name.vb: IncludeMany(Of TEntity)(IQueryable(Of TEntity), String())
references:
- uid: NeerCore.Data.EntityFramework.Extensions
  commentId: N:NeerCore.Data.EntityFramework.Extensions
  name: NeerCore.Data.EntityFramework.Extensions
  nameWithType: NeerCore.Data.EntityFramework.Extensions
  fullName: NeerCore.Data.EntityFramework.Extensions
- uid: NeerCore.Exceptions.NotFoundException
  commentId: T:NeerCore.Exceptions.NotFoundException
  isExternal: true
- uid: NeerCore.Data.Abstractions.IEntity
  commentId: T:NeerCore.Data.Abstractions.IEntity
  isExternal: true
- uid: NeerCore.Exceptions.NotFoundException`1
  commentId: T:NeerCore.Exceptions.NotFoundException`1
  isExternal: true
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async*
  commentId: Overload:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async
  name: FirstOr404Async
  nameWithType: QueryableExtensions.FirstOr404Async
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.FirstOr404Async
- uid: IQueryable{{TEntity}}
  commentId: '!:IQueryable{``0}'
  definition: IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullName.vb: IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{{TEntity}}
  commentId: '!:Task{``0}'
  definition: Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: IQueryable`1
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Expression{Func{{TEntity},System.Boolean}}
  commentId: '!:Expression{Func{``0,System.Boolean}}'
  definition: Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: Expression<Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: Expression(Of Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany*
  commentId: Overload:NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany
  name: IncludeMany
  nameWithType: QueryableExtensions.IncludeMany
  fullName: NeerCore.Data.EntityFramework.Extensions.QueryableExtensions.IncludeMany
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
