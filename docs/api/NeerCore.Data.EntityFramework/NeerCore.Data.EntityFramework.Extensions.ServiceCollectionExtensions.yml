### YamlMime:ManagedReference
items:
- uid: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions
  commentId: T:NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions
  id: ServiceCollectionExtensions
  parent: NeerCore.Data.EntityFramework.Extensions
  children:
  - NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase``1(IServiceCollection,System.Nullable{Action{DbContextOptionsBuilder}},ServiceLifetime,ServiceLifetime)
  - NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase``2(IServiceCollection,ServiceLifetime,ServiceLifetime)
  langs:
  - csharp
  - vb
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/ServiceCollectionExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: ServiceCollectionExtensions
    path: ../src/NeerCore.Data.EntityFramework/Extensions/ServiceCollectionExtensions.cs
    startLine: 7
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  syntax:
    content: 'public static class ServiceCollectionExtensions : object'
    content.vb: >-
      Public Module ServiceCollectionExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase``1(IServiceCollection,System.Nullable{Action{DbContextOptionsBuilder}},ServiceLifetime,ServiceLifetime)
  commentId: M:NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase``1(IServiceCollection,System.Nullable{Action{DbContextOptionsBuilder}},ServiceLifetime,ServiceLifetime)
  id: AddDatabase``1(IServiceCollection,System.Nullable{Action{DbContextOptionsBuilder}},ServiceLifetime,ServiceLifetime)
  isExtensionMethod: true
  parent: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddDatabase<TContext>(IServiceCollection, Nullable<Action<DbContextOptionsBuilder>>, ServiceLifetime, ServiceLifetime)
  nameWithType: ServiceCollectionExtensions.AddDatabase<TContext>(IServiceCollection, Nullable<Action<DbContextOptionsBuilder>>, ServiceLifetime, ServiceLifetime)
  fullName: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase<TContext>(IServiceCollection, System.Nullable<Action<DbContextOptionsBuilder>>, ServiceLifetime, ServiceLifetime)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/ServiceCollectionExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AddDatabase
    path: ../src/NeerCore.Data.EntityFramework/Extensions/ServiceCollectionExtensions.cs
    startLine: 33
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  summary: "\nAdds a <see cref=\"!:DbContext\"></see> to DI container as <xref href=\"NeerCore.Data.EntityFramework.Abstractions.IDatabase\" data-throw-if-not-resolved=\"false\"></xref> abstraction.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddDatabase<TContext>(this IServiceCollection services, Action<DbContextOptionsBuilder>? optionsAction = null, ServiceLifetime contextLifetime = null, ServiceLifetime optionsLifetime = null)
          where TContext : DbContext, IDatabase
    parameters:
    - id: services
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> to add services to.
    - id: optionsAction
      type: System.Nullable{Action{DbContextOptionsBuilder}}
      description: "\n<p>\n    An optional action to configure the <see cref=\"!:DbContextOptions\"></see> for the context. This provides an\n    alternative to performing configuration of the context by overriding the\n<see cref=\"!:DbContext.OnConfiguring\"></see> method in your derived context.\n</p>\n<p>\n    If an action is supplied here, the <see cref=\"!:DbContext.OnConfiguring\"></see> method will still be run if it has\n    been overridden on the derived context. <see cref=\"!:DbContext.OnConfiguring\"></see> configuration will be applied\n    in addition to configuration performed here.\n</p>\n<p>\n    In order for the options to be passed into your context, you need to expose a constructor on your context that takes\n<see cref=\"!:DbContextOptions&lt;TContext>\"></see> and passes it to the base constructor of <see cref=\"!:DbContext\"></see>.\n</p>\n"
    - id: contextLifetime
      type: ServiceLifetime
      description: The lifetime with which to register the DbContext service in the container.
    - id: optionsLifetime
      type: ServiceLifetime
      description: The lifetime with which to register the DbContextOptions service in the container.
    typeParameters:
    - id: TContext
      description: The type of context to be registered.
    return:
      type: IServiceCollection
      description: The same service collection so that multiple calls can be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddDatabase(Of TContext As {DbContext, IDatabase})(services As IServiceCollection, optionsAction As Action(Of DbContextOptionsBuilder)? = Nothing, contextLifetime As ServiceLifetime = Nothing, optionsLifetime As ServiceLifetime = Nothing) As IServiceCollection
  overload: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase*
  nameWithType.vb: ServiceCollectionExtensions.AddDatabase(Of TContext)(IServiceCollection, Nullable(Of Action(Of DbContextOptionsBuilder)), ServiceLifetime, ServiceLifetime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase(Of TContext)(IServiceCollection, System.Nullable(Of Action(Of DbContextOptionsBuilder)), ServiceLifetime, ServiceLifetime)
  name.vb: AddDatabase(Of TContext)(IServiceCollection, Nullable(Of Action(Of DbContextOptionsBuilder)), ServiceLifetime, ServiceLifetime)
- uid: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase``2(IServiceCollection,ServiceLifetime,ServiceLifetime)
  commentId: M:NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase``2(IServiceCollection,ServiceLifetime,ServiceLifetime)
  id: AddDatabase``2(IServiceCollection,ServiceLifetime,ServiceLifetime)
  isExtensionMethod: true
  parent: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddDatabase<TContext, TContextFactory>(IServiceCollection, ServiceLifetime, ServiceLifetime)
  nameWithType: ServiceCollectionExtensions.AddDatabase<TContext, TContextFactory>(IServiceCollection, ServiceLifetime, ServiceLifetime)
  fullName: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase<TContext, TContextFactory>(IServiceCollection, ServiceLifetime, ServiceLifetime)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Extensions/ServiceCollectionExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AddDatabase
    path: ../src/NeerCore.Data.EntityFramework/Extensions/ServiceCollectionExtensions.cs
    startLine: 54
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Extensions
  summary: "\nAdds a <see cref=\"!:DbContext\"></see> to DI container as <xref href=\"NeerCore.Data.EntityFramework.Abstractions.IDatabase\" data-throw-if-not-resolved=\"false\"></xref> abstraction\nand use configuration from <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TContextFactory</code>.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddDatabase<TContext, TContextFactory>(this IServiceCollection services, ServiceLifetime contextLifetime = null, ServiceLifetime optionsLifetime = null)
          where TContext : DbContext, IDatabase where TContextFactory : DbContextFactoryBase<TContext>, new()
    parameters:
    - id: services
      type: IServiceCollection
      description: The <see cref="!:IServiceCollection"></see> to add services to.
    - id: contextLifetime
      type: ServiceLifetime
      description: The lifetime with which to register the DbContext service in the container.
    - id: optionsLifetime
      type: ServiceLifetime
      description: The lifetime with which to register the DbContextOptions service in the container.
    typeParameters:
    - id: TContext
      description: The type of context to be registered.
    - id: TContextFactory
      description: The type of the context factory for <code data-dev-comment-type="typeparamref" class="typeparamref">TContext</code>.
    return:
      type: IServiceCollection
      description: The same service collection so that multiple calls can be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddDatabase(Of TContext As {DbContext, IDatabase}, TContextFactory As {DbContextFactoryBase(Of TContext), New})(services As IServiceCollection, contextLifetime As ServiceLifetime = Nothing, optionsLifetime As ServiceLifetime = Nothing) As IServiceCollection
  overload: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase*
  nameWithType.vb: ServiceCollectionExtensions.AddDatabase(Of TContext, TContextFactory)(IServiceCollection, ServiceLifetime, ServiceLifetime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase(Of TContext, TContextFactory)(IServiceCollection, ServiceLifetime, ServiceLifetime)
  name.vb: AddDatabase(Of TContext, TContextFactory)(IServiceCollection, ServiceLifetime, ServiceLifetime)
references:
- uid: NeerCore.Data.EntityFramework.Extensions
  commentId: N:NeerCore.Data.EntityFramework.Extensions
  name: NeerCore.Data.EntityFramework.Extensions
  nameWithType: NeerCore.Data.EntityFramework.Extensions
  fullName: NeerCore.Data.EntityFramework.Extensions
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  commentId: T:NeerCore.Data.EntityFramework.Abstractions.IDatabase
  name: IDatabase
  nameWithType: IDatabase
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase
- uid: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase*
  commentId: Overload:NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase
  name: AddDatabase
  nameWithType: ServiceCollectionExtensions.AddDatabase
  fullName: NeerCore.Data.EntityFramework.Extensions.ServiceCollectionExtensions.AddDatabase
- uid: IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: IServiceCollection
- uid: System.Nullable{Action{DbContextOptionsBuilder}}
  commentId: '!:System.Nullable{Action{DbContextOptionsBuilder}}'
  definition: System.Nullable`1
  name: Nullable<Action<DbContextOptionsBuilder>>
  nameWithType: Nullable<Action<DbContextOptionsBuilder>>
  fullName: System.Nullable<Action<DbContextOptionsBuilder>>
  nameWithType.vb: Nullable(Of Action(Of DbContextOptionsBuilder))
  fullName.vb: System.Nullable(Of Action(Of DbContextOptionsBuilder))
  name.vb: Nullable(Of Action(Of DbContextOptionsBuilder))
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DbContextOptionsBuilder
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: DbContextOptionsBuilder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DbContextOptionsBuilder
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: DbContextOptionsBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ServiceLifetime
  isExternal: true
  name: ServiceLifetime
  nameWithType: ServiceLifetime
  fullName: ServiceLifetime
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
