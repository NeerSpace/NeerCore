### YamlMime:ManagedReference
items:
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  commentId: T:NeerCore.Data.EntityFramework.Abstractions.IDatabase
  id: IDatabase
  parent: NeerCore.Data.EntityFramework.Abstractions
  children:
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add``1(``0)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(IEnumerable{System.Object})
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(System.Object[])
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach``1(``0)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(IEnumerable{System.Object})
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(System.Object[])
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry``1(``0)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync(Type,System.Nullable{System.Object}[])
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync``1(System.Nullable{System.Object}[])
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove``1(``0)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(IEnumerable{System.Object})
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(System.Object[])
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(CancellationToken)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(System.Boolean,CancellationToken)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set``1
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set``1(System.String)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update``1(``0)
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(IEnumerable{System.Object})
  - NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(System.Object[])
  langs:
  - csharp
  - vb
  name: IDatabase
  nameWithType: IDatabase
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  type: Interface
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: IDatabase
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 7
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: public interface IDatabase
    content.vb: Public Interface IDatabase
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database
  commentId: P:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database
  id: Database
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Database
  nameWithType: IDatabase.Database
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database
  type: Property
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Database
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 10
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: DatabaseFacade Database { get; }
    parameters: []
    return:
      type: DatabaseFacade
    content.vb: ReadOnly Property Database As DatabaseFacade
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set``1
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set``1
  id: Set``1
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Set<TEntity>()
  nameWithType: IDatabase.Set<TEntity>()
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set<TEntity>()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Set
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 14
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      DbSet<TEntity> Set<TEntity>()
          where TEntity : class
    typeParameters:
    - id: TEntity
    return:
      type: DbSet{{TEntity}}
    content.vb: Function Set(Of TEntity As Class) As DbSet(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set*
  nameWithType.vb: IDatabase.Set(Of TEntity)()
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set(Of TEntity)()
  name.vb: Set(Of TEntity)()
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set``1(System.String)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set``1(System.String)
  id: Set``1(System.String)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Set<TEntity>(String)
  nameWithType: IDatabase.Set<TEntity>(String)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set<TEntity>(System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Set
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 17
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      DbSet<TEntity> Set<TEntity>(string name)
          where TEntity : class
    parameters:
    - id: name
      type: System.String
    typeParameters:
    - id: TEntity
    return:
      type: DbSet{{TEntity}}
    content.vb: Function Set(Of TEntity As Class)(name As String) As DbSet(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set*
  nameWithType.vb: IDatabase.Set(Of TEntity)(String)
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set(Of TEntity)(System.String)
  name.vb: Set(Of TEntity)(String)
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(CancellationToken)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(CancellationToken)
  id: SaveChangesAsync(CancellationToken)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(CancellationToken)
  nameWithType: IDatabase.SaveChangesAsync(CancellationToken)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(CancellationToken)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: SaveChangesAsync
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 21
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: Task<int> SaveChangesAsync(CancellationToken cancellationToken = null)
    parameters:
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task{System.Int32}
    content.vb: Function SaveChangesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync*
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(System.Boolean,CancellationToken)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(System.Boolean,CancellationToken)
  id: SaveChangesAsync(System.Boolean,CancellationToken)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(Boolean, CancellationToken)
  nameWithType: IDatabase.SaveChangesAsync(Boolean, CancellationToken)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync(System.Boolean, CancellationToken)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: SaveChangesAsync
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 24
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = null)
    parameters:
    - id: acceptAllChangesOnSuccess
      type: System.Boolean
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task{System.Int32}
    content.vb: Function SaveChangesAsync(acceptAllChangesOnSuccess As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync*
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync
  id: DisposeAsync
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: IDatabase.DisposeAsync()
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: DisposeAsync
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 28
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: ValueTask DisposeAsync()
    return:
      type: ValueTask
    content.vb: Function DisposeAsync As ValueTask
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync*
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry``1(``0)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry``1(``0)
  id: Entry``1(``0)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Entry<TEntity>(TEntity)
  nameWithType: IDatabase.Entry<TEntity>(TEntity)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Entry
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 32
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      EntityEntry<TEntity> Entry<TEntity>(TEntity entity)
          where TEntity : class
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: EntityEntry{{TEntity}}
    content.vb: Function Entry(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry*
  nameWithType.vb: IDatabase.Entry(Of TEntity)(TEntity)
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry(Of TEntity)(TEntity)
  name.vb: Entry(Of TEntity)(TEntity)
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add``1(``0)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add``1(``0)
  id: Add``1(``0)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Add<TEntity>(TEntity)
  nameWithType: IDatabase.Add<TEntity>(TEntity)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Add
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 35
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      EntityEntry<TEntity> Add<TEntity>(TEntity entity)
          where TEntity : class
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: EntityEntry{{TEntity}}
    content.vb: Function Add(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add*
  nameWithType.vb: IDatabase.Add(Of TEntity)(TEntity)
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add(Of TEntity)(TEntity)
  name.vb: Add(Of TEntity)(TEntity)
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach``1(``0)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach``1(``0)
  id: Attach``1(``0)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Attach<TEntity>(TEntity)
  nameWithType: IDatabase.Attach<TEntity>(TEntity)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Attach
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 38
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      EntityEntry<TEntity> Attach<TEntity>(TEntity entity)
          where TEntity : class
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: EntityEntry{{TEntity}}
    content.vb: Function Attach(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach*
  nameWithType.vb: IDatabase.Attach(Of TEntity)(TEntity)
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach(Of TEntity)(TEntity)
  name.vb: Attach(Of TEntity)(TEntity)
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update``1(``0)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update``1(``0)
  id: Update``1(``0)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Update<TEntity>(TEntity)
  nameWithType: IDatabase.Update<TEntity>(TEntity)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Update
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 41
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      EntityEntry<TEntity> Update<TEntity>(TEntity entity)
          where TEntity : class
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: EntityEntry{{TEntity}}
    content.vb: Function Update(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update*
  nameWithType.vb: IDatabase.Update(Of TEntity)(TEntity)
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update(Of TEntity)(TEntity)
  name.vb: Update(Of TEntity)(TEntity)
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove``1(``0)
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove``1(``0)
  id: Remove``1(``0)
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: Remove<TEntity>(TEntity)
  nameWithType: IDatabase.Remove<TEntity>(TEntity)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Remove
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 44
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      EntityEntry<TEntity> Remove<TEntity>(TEntity entity)
          where TEntity : class
    parameters:
    - id: entity
      type: '{TEntity}'
    typeParameters:
    - id: TEntity
    return:
      type: EntityEntry{{TEntity}}
    content.vb: Function Remove(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove*
  nameWithType.vb: IDatabase.Remove(Of TEntity)(TEntity)
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove(Of TEntity)(TEntity)
  name.vb: Remove(Of TEntity)(TEntity)
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(System.Object[])
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(System.Object[])
  id: AttachRange(System.Object[])
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: AttachRange(Object[])
  nameWithType: IDatabase.AttachRange(Object[])
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AttachRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 48
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void AttachRange(params object[] entities)
    parameters:
    - id: entities
      type: System.Object[]
    content.vb: Sub AttachRange(ParamArray entities As Object())
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange*
  nameWithType.vb: IDatabase.AttachRange(Object())
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(System.Object())
  name.vb: AttachRange(Object())
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(IEnumerable{System.Object})
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(IEnumerable{System.Object})
  id: AttachRange(IEnumerable{System.Object})
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: AttachRange(IEnumerable<Object>)
  nameWithType: IDatabase.AttachRange(IEnumerable<Object>)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AttachRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 51
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void AttachRange(IEnumerable<object> entities)
    parameters:
    - id: entities
      type: IEnumerable{System.Object}
    content.vb: Sub AttachRange(entities As IEnumerable(Of Object))
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange*
  nameWithType.vb: IDatabase.AttachRange(IEnumerable(Of Object))
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange(IEnumerable(Of System.Object))
  name.vb: AttachRange(IEnumerable(Of Object))
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(System.Object[])
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(System.Object[])
  id: AddRange(System.Object[])
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: AddRange(Object[])
  nameWithType: IDatabase.AddRange(Object[])
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AddRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 54
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void AddRange(params object[] entities)
    parameters:
    - id: entities
      type: System.Object[]
    content.vb: Sub AddRange(ParamArray entities As Object())
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange*
  nameWithType.vb: IDatabase.AddRange(Object())
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(System.Object())
  name.vb: AddRange(Object())
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(IEnumerable{System.Object})
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(IEnumerable{System.Object})
  id: AddRange(IEnumerable{System.Object})
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<Object>)
  nameWithType: IDatabase.AddRange(IEnumerable<Object>)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AddRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 57
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void AddRange(IEnumerable<object> entities)
    parameters:
    - id: entities
      type: IEnumerable{System.Object}
    content.vb: Sub AddRange(entities As IEnumerable(Of Object))
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange*
  nameWithType.vb: IDatabase.AddRange(IEnumerable(Of Object))
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange(IEnumerable(Of System.Object))
  name.vb: AddRange(IEnumerable(Of Object))
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(System.Object[])
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(System.Object[])
  id: UpdateRange(System.Object[])
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: UpdateRange(Object[])
  nameWithType: IDatabase.UpdateRange(Object[])
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: UpdateRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 60
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void UpdateRange(params object[] entities)
    parameters:
    - id: entities
      type: System.Object[]
    content.vb: Sub UpdateRange(ParamArray entities As Object())
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange*
  nameWithType.vb: IDatabase.UpdateRange(Object())
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(System.Object())
  name.vb: UpdateRange(Object())
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(IEnumerable{System.Object})
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(IEnumerable{System.Object})
  id: UpdateRange(IEnumerable{System.Object})
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: UpdateRange(IEnumerable<Object>)
  nameWithType: IDatabase.UpdateRange(IEnumerable<Object>)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: UpdateRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 63
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void UpdateRange(IEnumerable<object> entities)
    parameters:
    - id: entities
      type: IEnumerable{System.Object}
    content.vb: Sub UpdateRange(entities As IEnumerable(Of Object))
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange*
  nameWithType.vb: IDatabase.UpdateRange(IEnumerable(Of Object))
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange(IEnumerable(Of System.Object))
  name.vb: UpdateRange(IEnumerable(Of Object))
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(System.Object[])
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(System.Object[])
  id: RemoveRange(System.Object[])
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: RemoveRange(Object[])
  nameWithType: IDatabase.RemoveRange(Object[])
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: RemoveRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 66
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void RemoveRange(params object[] entities)
    parameters:
    - id: entities
      type: System.Object[]
    content.vb: Sub RemoveRange(ParamArray entities As Object())
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange*
  nameWithType.vb: IDatabase.RemoveRange(Object())
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(System.Object())
  name.vb: RemoveRange(Object())
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(IEnumerable{System.Object})
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(IEnumerable{System.Object})
  id: RemoveRange(IEnumerable{System.Object})
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: RemoveRange(IEnumerable<Object>)
  nameWithType: IDatabase.RemoveRange(IEnumerable<Object>)
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: RemoveRange
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 69
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: void RemoveRange(IEnumerable<object> entities)
    parameters:
    - id: entities
      type: IEnumerable{System.Object}
    content.vb: Sub RemoveRange(entities As IEnumerable(Of Object))
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange*
  nameWithType.vb: IDatabase.RemoveRange(IEnumerable(Of Object))
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange(IEnumerable(Of System.Object))
  name.vb: RemoveRange(IEnumerable(Of Object))
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync(Type,System.Nullable{System.Object}[])
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync(Type,System.Nullable{System.Object}[])
  id: FindAsync(Type,System.Nullable{System.Object}[])
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: FindAsync(Type, Nullable<Object>[])
  nameWithType: IDatabase.FindAsync(Type, Nullable<Object>[])
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync(Type, System.Nullable<System.Object>[])
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FindAsync
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 73
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: ValueTask<object?> FindAsync(Type entityType, params object? [] keyValues)
    parameters:
    - id: entityType
      type: Type
    - id: keyValues
      type: System.Nullable{System.Object}[]
    return:
      type: ValueTask{System.Nullable{System.Object}}
    content.vb: Function FindAsync(entityType As Type, ParamArray keyValues As Object?()) As ValueTask(Of Object?)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync*
  nameWithType.vb: IDatabase.FindAsync(Type, Nullable(Of Object)())
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync(Type, System.Nullable(Of System.Object)())
  name.vb: FindAsync(Type, Nullable(Of Object)())
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync``1(System.Nullable{System.Object}[])
  commentId: M:NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync``1(System.Nullable{System.Object}[])
  id: FindAsync``1(System.Nullable{System.Object}[])
  parent: NeerCore.Data.EntityFramework.Abstractions.IDatabase
  langs:
  - csharp
  - vb
  name: FindAsync<TEntity>(Nullable<Object>[])
  nameWithType: IDatabase.FindAsync<TEntity>(Nullable<Object>[])
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync<TEntity>(System.Nullable<System.Object>[])
  type: Method
  source:
    remote:
      path: src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FindAsync
    path: ../src/NeerCore.Data.EntityFramework/Abstractions/IDatabase.cs
    startLine: 76
  assemblies:
  - NeerCore.Data.EntityFramework
  namespace: NeerCore.Data.EntityFramework.Abstractions
  example: []
  syntax:
    content: >-
      ValueTask<TEntity> FindAsync<TEntity>(object? [] keyValues)
          where TEntity : class
    parameters:
    - id: keyValues
      type: System.Nullable{System.Object}[]
    typeParameters:
    - id: TEntity
    return:
      type: ValueTask{{TEntity}}
    content.vb: Function FindAsync(Of TEntity As Class)(keyValues As Object?()) As ValueTask(Of TEntity)
  overload: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync*
  nameWithType.vb: IDatabase.FindAsync(Of TEntity)(Nullable(Of Object)())
  fullName.vb: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync(Of TEntity)(System.Nullable(Of System.Object)())
  name.vb: FindAsync(Of TEntity)(Nullable(Of Object)())
references:
- uid: NeerCore.Data.EntityFramework.Abstractions
  commentId: N:NeerCore.Data.EntityFramework.Abstractions
  name: NeerCore.Data.EntityFramework.Abstractions
  nameWithType: NeerCore.Data.EntityFramework.Abstractions
  fullName: NeerCore.Data.EntityFramework.Abstractions
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database
  name: Database
  nameWithType: IDatabase.Database
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Database
- uid: DatabaseFacade
  commentId: '!:DatabaseFacade'
  isExternal: true
  name: DatabaseFacade
  nameWithType: DatabaseFacade
  fullName: DatabaseFacade
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set
  name: Set
  nameWithType: IDatabase.Set
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Set
- uid: DbSet{{TEntity}}
  commentId: '!:DbSet{``0}'
  definition: DbSet`1
  name: DbSet<TEntity>
  nameWithType: DbSet<TEntity>
  fullName: DbSet<TEntity>
  nameWithType.vb: DbSet(Of TEntity)
  fullName.vb: DbSet(Of TEntity)
  name.vb: DbSet(Of TEntity)
  spec.csharp:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DbSet`1
  isExternal: true
  name: DbSet<>
  nameWithType: DbSet<>
  fullName: DbSet<>
  nameWithType.vb: DbSet(Of )
  fullName.vb: DbSet(Of )
  name.vb: DbSet(Of )
  spec.csharp:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync
  name: SaveChangesAsync
  nameWithType: IDatabase.SaveChangesAsync
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.SaveChangesAsync
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync
  name: DisposeAsync
  nameWithType: IDatabase.DisposeAsync
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.DisposeAsync
- uid: ValueTask
  commentId: '!:ValueTask'
  isExternal: true
  name: ValueTask
  nameWithType: ValueTask
  fullName: ValueTask
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry
  name: Entry
  nameWithType: IDatabase.Entry
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Entry
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: EntityEntry{{TEntity}}
  commentId: '!:EntityEntry{``0}'
  definition: EntityEntry`1
  name: EntityEntry<TEntity>
  nameWithType: EntityEntry<TEntity>
  fullName: EntityEntry<TEntity>
  nameWithType.vb: EntityEntry(Of TEntity)
  fullName.vb: EntityEntry(Of TEntity)
  name.vb: EntityEntry(Of TEntity)
  spec.csharp:
  - uid: EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: EntityEntry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: EntityEntry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: EntityEntry`1
  isExternal: true
  name: EntityEntry<>
  nameWithType: EntityEntry<>
  fullName: EntityEntry<>
  nameWithType.vb: EntityEntry(Of )
  fullName.vb: EntityEntry(Of )
  name.vb: EntityEntry(Of )
  spec.csharp:
  - uid: EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: EntityEntry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: EntityEntry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add
  name: Add
  nameWithType: IDatabase.Add
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Add
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach
  name: Attach
  nameWithType: IDatabase.Attach
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Attach
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update
  name: Update
  nameWithType: IDatabase.Update
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Update
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove
  name: Remove
  nameWithType: IDatabase.Remove
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.Remove
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange
  name: AttachRange
  nameWithType: IDatabase.AttachRange
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AttachRange
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IEnumerable{System.Object}
  commentId: '!:IEnumerable{System.Object}'
  definition: IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange
  name: AddRange
  nameWithType: IDatabase.AddRange
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.AddRange
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange
  name: UpdateRange
  nameWithType: IDatabase.UpdateRange
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.UpdateRange
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange
  name: RemoveRange
  nameWithType: IDatabase.RemoveRange
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.RemoveRange
- uid: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync*
  commentId: Overload:NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync
  name: FindAsync
  nameWithType: IDatabase.FindAsync
  fullName: NeerCore.Data.EntityFramework.Abstractions.IDatabase.FindAsync
- uid: Type
  commentId: '!:Type'
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: System.Nullable{System.Object}[]
  isExternal: true
  name: Nullable<Object>[]
  nameWithType: Nullable<Object>[]
  fullName: System.Nullable<System.Object>[]
  nameWithType.vb: Nullable(Of Object)()
  fullName.vb: System.Nullable(Of System.Object)()
  name.vb: Nullable(Of Object)()
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ValueTask{System.Nullable{System.Object}}
  commentId: '!:ValueTask{System.Nullable{System.Object}}'
  definition: ValueTask`1
  name: ValueTask<Nullable<Object>>
  nameWithType: ValueTask<Nullable<Object>>
  fullName: ValueTask<System.Nullable<System.Object>>
  nameWithType.vb: ValueTask(Of Nullable(Of Object))
  fullName.vb: ValueTask(Of System.Nullable(Of System.Object))
  name.vb: ValueTask(Of Nullable(Of Object))
  spec.csharp:
  - uid: ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ValueTask`1
  isExternal: true
  name: ValueTask<>
  nameWithType: ValueTask<>
  fullName: ValueTask<>
  nameWithType.vb: ValueTask(Of )
  fullName.vb: ValueTask(Of )
  name.vb: ValueTask(Of )
  spec.csharp:
  - uid: ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ValueTask{{TEntity}}
  commentId: '!:ValueTask{``0}'
  definition: ValueTask`1
  name: ValueTask<TEntity>
  nameWithType: ValueTask<TEntity>
  fullName: ValueTask<TEntity>
  nameWithType.vb: ValueTask(Of TEntity)
  fullName.vb: ValueTask(Of TEntity)
  name.vb: ValueTask(Of TEntity)
  spec.csharp:
  - uid: ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
