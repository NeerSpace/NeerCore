### YamlMime:ManagedReference
items:
- uid: NeerCore.DependencyInjection.InjectionType
  commentId: T:NeerCore.DependencyInjection.InjectionType
  id: InjectionType
  parent: NeerCore.DependencyInjection
  children:
  - NeerCore.DependencyInjection.InjectionType.Auto
  - NeerCore.DependencyInjection.InjectionType.BaseClass
  - NeerCore.DependencyInjection.InjectionType.Default
  - NeerCore.DependencyInjection.InjectionType.Interface
  - NeerCore.DependencyInjection.InjectionType.Self
  langs:
  - csharp
  - vb
  name: InjectionType
  nameWithType: InjectionType
  fullName: NeerCore.DependencyInjection.InjectionType
  type: Enum
  source:
    remote:
      path: src/NeerCore.DependencyInjection/InjectionType.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: InjectionType
    path: src/NeerCore.DependencyInjection/InjectionType.cs
    startLine: 5
  assemblies:
  - NeerCore.DependencyInjection
  namespace: NeerCore.DependencyInjection
  summary: "\nWays to inject a class into a DI container.\n"
  example: []
  syntax:
    content: 'public enum InjectionType : int'
    content.vb: Public Enum InjectionType As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: NeerCore.DependencyInjection.InjectionType.Default
  commentId: F:NeerCore.DependencyInjection.InjectionType.Default
  id: Default
  parent: NeerCore.DependencyInjection.InjectionType
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: InjectionType.Default
  fullName: NeerCore.DependencyInjection.InjectionType.Default
  type: Field
  source:
    remote:
      path: src/NeerCore.DependencyInjection/InjectionType.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Default
    path: src/NeerCore.DependencyInjection/InjectionType.cs
    startLine: 10
  assemblies:
  - NeerCore.DependencyInjection
  namespace: NeerCore.DependencyInjection
  summary: "\nUses the default value defined at configuring injection.\n"
  example: []
  syntax:
    content: Default = 0
    return:
      type: NeerCore.DependencyInjection.InjectionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NeerCore.DependencyInjection.InjectionType.Auto
  commentId: F:NeerCore.DependencyInjection.InjectionType.Auto
  id: Auto
  parent: NeerCore.DependencyInjection.InjectionType
  langs:
  - csharp
  - vb
  name: Auto
  nameWithType: InjectionType.Auto
  fullName: NeerCore.DependencyInjection.InjectionType.Auto
  type: Field
  source:
    remote:
      path: src/NeerCore.DependencyInjection/InjectionType.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Auto
    path: src/NeerCore.DependencyInjection/InjectionType.cs
    startLine: 23
  assemblies:
  - NeerCore.DependencyInjection
  namespace: NeerCore.DependencyInjection
  summary: "\nAutomatically define prefer injection type.\n"
  remarks: "\nHow it works:\n<ol><li>If it implements any interface it will be injected as <xref href=\"NeerCore.DependencyInjection.InjectionType.Interface\" data-throw-if-not-resolved=\"false\"></xref>.</li><li>If it extends any class it will be injected as <xref href=\"NeerCore.DependencyInjection.InjectionType.BaseClass\" data-throw-if-not-resolved=\"false\"></xref>.</li><li>Otherwise it will be injected as <xref href=\"NeerCore.DependencyInjection.InjectionType.Self\" data-throw-if-not-resolved=\"false\"></xref>.</li></ol>\n"
  example: []
  syntax:
    content: Auto = 1
    return:
      type: NeerCore.DependencyInjection.InjectionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NeerCore.DependencyInjection.InjectionType.Interface
  commentId: F:NeerCore.DependencyInjection.InjectionType.Interface
  id: Interface
  parent: NeerCore.DependencyInjection.InjectionType
  langs:
  - csharp
  - vb
  name: Interface
  nameWithType: InjectionType.Interface
  fullName: NeerCore.DependencyInjection.InjectionType.Interface
  type: Field
  source:
    remote:
      path: src/NeerCore.DependencyInjection/InjectionType.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Interface
    path: src/NeerCore.DependencyInjection/InjectionType.cs
    startLine: 28
  assemblies:
  - NeerCore.DependencyInjection
  namespace: NeerCore.DependencyInjection
  summary: "\nInject as implemented interface realisation.\n"
  example: []
  syntax:
    content: Interface = 2
    return:
      type: NeerCore.DependencyInjection.InjectionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NeerCore.DependencyInjection.InjectionType.Self
  commentId: F:NeerCore.DependencyInjection.InjectionType.Self
  id: Self
  parent: NeerCore.DependencyInjection.InjectionType
  langs:
  - csharp
  - vb
  name: Self
  nameWithType: InjectionType.Self
  fullName: NeerCore.DependencyInjection.InjectionType.Self
  type: Field
  source:
    remote:
      path: src/NeerCore.DependencyInjection/InjectionType.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Self
    path: src/NeerCore.DependencyInjection/InjectionType.cs
    startLine: 33
  assemblies:
  - NeerCore.DependencyInjection
  namespace: NeerCore.DependencyInjection
  summary: "\nInject own self.\n"
  example: []
  syntax:
    content: Self = 3
    return:
      type: NeerCore.DependencyInjection.InjectionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NeerCore.DependencyInjection.InjectionType.BaseClass
  commentId: F:NeerCore.DependencyInjection.InjectionType.BaseClass
  id: BaseClass
  parent: NeerCore.DependencyInjection.InjectionType
  langs:
  - csharp
  - vb
  name: BaseClass
  nameWithType: InjectionType.BaseClass
  fullName: NeerCore.DependencyInjection.InjectionType.BaseClass
  type: Field
  source:
    remote:
      path: src/NeerCore.DependencyInjection/InjectionType.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: BaseClass
    path: src/NeerCore.DependencyInjection/InjectionType.cs
    startLine: 38
  assemblies:
  - NeerCore.DependencyInjection
  namespace: NeerCore.DependencyInjection
  summary: "\nInject as parent class.\n"
  example: []
  syntax:
    content: BaseClass = 4
    return:
      type: NeerCore.DependencyInjection.InjectionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: NeerCore.DependencyInjection
  commentId: N:NeerCore.DependencyInjection
  name: NeerCore.DependencyInjection
  nameWithType: NeerCore.DependencyInjection
  fullName: NeerCore.DependencyInjection
- uid: NeerCore.DependencyInjection.InjectionType
  commentId: T:NeerCore.DependencyInjection.InjectionType
  parent: NeerCore.DependencyInjection
  name: InjectionType
  nameWithType: InjectionType
  fullName: NeerCore.DependencyInjection.InjectionType
- uid: NeerCore.DependencyInjection.InjectionType.Interface
  commentId: F:NeerCore.DependencyInjection.InjectionType.Interface
  isExternal: true
- uid: NeerCore.DependencyInjection.InjectionType.BaseClass
  commentId: F:NeerCore.DependencyInjection.InjectionType.BaseClass
  isExternal: true
- uid: NeerCore.DependencyInjection.InjectionType.Self
  commentId: F:NeerCore.DependencyInjection.InjectionType.Self
  isExternal: true
