### YamlMime:ManagedReference
items:
- uid: NeerCore.Data.LocalizationDictionary
  commentId: T:NeerCore.Data.LocalizationDictionary
  id: LocalizationDictionary
  parent: NeerCore.Data
  children:
  - NeerCore.Data.LocalizationDictionary.#ctor(Dictionary{System.String,System.String})
  - NeerCore.Data.LocalizationDictionary.Add(KeyValuePair{System.String,System.String})
  - NeerCore.Data.LocalizationDictionary.Add(System.String,System.String)
  - NeerCore.Data.LocalizationDictionary.Clear
  - NeerCore.Data.LocalizationDictionary.Contains(KeyValuePair{System.String,System.String})
  - NeerCore.Data.LocalizationDictionary.ContainsKey(System.String)
  - NeerCore.Data.LocalizationDictionary.CopyTo(KeyValuePair{System.String,System.String}[],System.Int32)
  - NeerCore.Data.LocalizationDictionary.Count
  - NeerCore.Data.LocalizationDictionary.GetEnumerator
  - NeerCore.Data.LocalizationDictionary.IsReadOnly
  - NeerCore.Data.LocalizationDictionary.Item(System.String)
  - NeerCore.Data.LocalizationDictionary.Keys
  - NeerCore.Data.LocalizationDictionary.Remove(KeyValuePair{System.String,System.String})
  - NeerCore.Data.LocalizationDictionary.Remove(System.String)
  - NeerCore.Data.LocalizationDictionary.TryGetValue(System.String,System.String@)
  - NeerCore.Data.LocalizationDictionary.Values
  langs:
  - csharp
  - vb
  name: LocalizationDictionary
  nameWithType: LocalizationDictionary
  fullName: NeerCore.Data.LocalizationDictionary
  type: Class
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: LocalizationDictionary
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 7
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: Dictionary wrapper for localization system.
  example: []
  syntax:
    content: 'public class LocalizationDictionary : IDictionary<string, string>'
    content.vb: >-
      Public Class LocalizationDictionary
          Inherits IDictionary(Of String, String)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NeerCore.Data.LocalizationDictionary.#ctor(Dictionary{System.String,System.String})
  commentId: M:NeerCore.Data.LocalizationDictionary.#ctor(Dictionary{System.String,System.String})
  id: '#ctor(Dictionary{System.String,System.String})'
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: LocalizationDictionary(Dictionary<String, String>)
  nameWithType: LocalizationDictionary.LocalizationDictionary(Dictionary<String, String>)
  fullName: NeerCore.Data.LocalizationDictionary.LocalizationDictionary(Dictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: .ctor
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 11
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public LocalizationDictionary(Dictionary<string, string> dict)
    parameters:
    - id: dict
      type: Dictionary{System.String,System.String}
    content.vb: Public Sub New(dict As Dictionary(Of String, String))
  overload: NeerCore.Data.LocalizationDictionary.#ctor*
  nameWithType.vb: LocalizationDictionary.LocalizationDictionary(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizationDictionary.LocalizationDictionary(Dictionary(Of System.String, System.String))
  name.vb: LocalizationDictionary(Dictionary(Of String, String))
- uid: NeerCore.Data.LocalizationDictionary.Item(System.String)
  commentId: P:NeerCore.Data.LocalizationDictionary.Item(System.String)
  id: Item(System.String)
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: LocalizationDictionary.Item[String]
  fullName: NeerCore.Data.LocalizationDictionary.Item[System.String]
  type: Property
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: this[]
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 19
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: Gets ar sets localization by language code.
  example: []
  syntax:
    content: public string this[string languageCode] { get; set; }
    parameters:
    - id: languageCode
      type: System.String
      description: Two letter language ISO code.
    return:
      type: System.String
    content.vb: Public Property Item(languageCode As String) As String
  overload: NeerCore.Data.LocalizationDictionary.Item*
  exceptions:
  - type: NeerCore.Data.Exceptions.InvalidLanguageCodeException
    commentId: T:NeerCore.Data.Exceptions.InvalidLanguageCodeException
    description: If localization for given <code data-dev-comment-type="paramref" class="paramref">languageCode</code> not exists in the dictionary.
  nameWithType.vb: LocalizationDictionary.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizationDictionary.Item(System.String)
  name.vb: Item(String)
- uid: NeerCore.Data.LocalizationDictionary.Keys
  commentId: P:NeerCore.Data.LocalizationDictionary.Keys
  id: Keys
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: LocalizationDictionary.Keys
  fullName: NeerCore.Data.LocalizationDictionary.Keys
  type: Property
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Keys
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 36
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public ICollection<string> Keys { get; }
    parameters: []
    return:
      type: ICollection{System.String}
    content.vb: Public ReadOnly Property Keys As ICollection(Of String)
  overload: NeerCore.Data.LocalizationDictionary.Keys*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NeerCore.Data.LocalizationDictionary.Values
  commentId: P:NeerCore.Data.LocalizationDictionary.Values
  id: Values
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: LocalizationDictionary.Values
  fullName: NeerCore.Data.LocalizationDictionary.Values
  type: Property
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Values
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 37
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public ICollection<string> Values { get; }
    parameters: []
    return:
      type: ICollection{System.String}
    content.vb: Public ReadOnly Property Values As ICollection(Of String)
  overload: NeerCore.Data.LocalizationDictionary.Values*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NeerCore.Data.LocalizationDictionary.Count
  commentId: P:NeerCore.Data.LocalizationDictionary.Count
  id: Count
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: LocalizationDictionary.Count
  fullName: NeerCore.Data.LocalizationDictionary.Count
  type: Property
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Count
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 38
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NeerCore.Data.LocalizationDictionary.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NeerCore.Data.LocalizationDictionary.IsReadOnly
  commentId: P:NeerCore.Data.LocalizationDictionary.IsReadOnly
  id: IsReadOnly
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: LocalizationDictionary.IsReadOnly
  fullName: NeerCore.Data.LocalizationDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: IsReadOnly
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 39
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: NeerCore.Data.LocalizationDictionary.IsReadOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NeerCore.Data.LocalizationDictionary.Add(System.String,System.String)
  commentId: M:NeerCore.Data.LocalizationDictionary.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Add(String, String)
  nameWithType: LocalizationDictionary.Add(String, String)
  fullName: NeerCore.Data.LocalizationDictionary.Add(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Add
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 45
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: Adds a new localization to the dictionary.
  example: []
  syntax:
    content: public void Add(string languageCode, string localizedValue)
    parameters:
    - id: languageCode
      type: System.String
      description: Two letter language ISO code.
    - id: localizedValue
      type: System.String
      description: Localized text.
    content.vb: Public Sub Add(languageCode As String, localizedValue As String)
  overload: NeerCore.Data.LocalizationDictionary.Add*
  exceptions:
  - type: NeerCore.Data.Exceptions.InvalidLanguageCodeException
    commentId: T:NeerCore.Data.Exceptions.InvalidLanguageCodeException
    description: If localization for given <code data-dev-comment-type="paramref" class="paramref">languageCode</code> already exists in the dictionary.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizationDictionary.Add(KeyValuePair{System.String,System.String})
  commentId: M:NeerCore.Data.LocalizationDictionary.Add(KeyValuePair{System.String,System.String})
  id: Add(KeyValuePair{System.String,System.String})
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<String, String>)
  nameWithType: LocalizationDictionary.Add(KeyValuePair<String, String>)
  fullName: NeerCore.Data.LocalizationDictionary.Add(KeyValuePair<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Add
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 59
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: Adds a new localization to the dictionary.
  example: []
  syntax:
    content: public void Add(KeyValuePair<string, string> localization)
    parameters:
    - id: localization
      type: KeyValuePair{System.String,System.String}
      description: "\nKey – Two letter language ISO code.\nValue – Localized text.\n"
    content.vb: Public Sub Add(localization As KeyValuePair(Of String, String))
  overload: NeerCore.Data.LocalizationDictionary.Add*
  exceptions:
  - type: NeerCore.Data.Exceptions.InvalidLanguageCodeException
    commentId: T:NeerCore.Data.Exceptions.InvalidLanguageCodeException
    description: If localization already exists in the dictionary.
  nameWithType.vb: LocalizationDictionary.Add(KeyValuePair(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizationDictionary.Add(KeyValuePair(Of System.String, System.String))
  name.vb: Add(KeyValuePair(Of String, String))
- uid: NeerCore.Data.LocalizationDictionary.Clear
  commentId: M:NeerCore.Data.LocalizationDictionary.Clear
  id: Clear
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: LocalizationDictionary.Clear()
  fullName: NeerCore.Data.LocalizationDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Clear
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 60
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: NeerCore.Data.LocalizationDictionary.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizationDictionary.Contains(KeyValuePair{System.String,System.String})
  commentId: M:NeerCore.Data.LocalizationDictionary.Contains(KeyValuePair{System.String,System.String})
  id: Contains(KeyValuePair{System.String,System.String})
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<String, String>)
  nameWithType: LocalizationDictionary.Contains(KeyValuePair<String, String>)
  fullName: NeerCore.Data.LocalizationDictionary.Contains(KeyValuePair<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Contains
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 61
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public bool Contains(KeyValuePair<string, string> localization)
    parameters:
    - id: localization
      type: KeyValuePair{System.String,System.String}
    return:
      type: System.Boolean
    content.vb: Public Function Contains(localization As KeyValuePair(Of String, String)) As Boolean
  overload: NeerCore.Data.LocalizationDictionary.Contains*
  nameWithType.vb: LocalizationDictionary.Contains(KeyValuePair(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizationDictionary.Contains(KeyValuePair(Of System.String, System.String))
  name.vb: Contains(KeyValuePair(Of String, String))
- uid: NeerCore.Data.LocalizationDictionary.ContainsKey(System.String)
  commentId: M:NeerCore.Data.LocalizationDictionary.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  nameWithType: LocalizationDictionary.ContainsKey(String)
  fullName: NeerCore.Data.LocalizationDictionary.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: ContainsKey
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 62
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public bool ContainsKey(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(languageCode As String) As Boolean
  overload: NeerCore.Data.LocalizationDictionary.ContainsKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizationDictionary.CopyTo(KeyValuePair{System.String,System.String}[],System.Int32)
  commentId: M:NeerCore.Data.LocalizationDictionary.CopyTo(KeyValuePair{System.String,System.String}[],System.Int32)
  id: CopyTo(KeyValuePair{System.String,System.String}[],System.Int32)
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<String, String>[], Int32)
  nameWithType: LocalizationDictionary.CopyTo(KeyValuePair<String, String>[], Int32)
  fullName: NeerCore.Data.LocalizationDictionary.CopyTo(KeyValuePair<System.String, System.String>[], System.Int32)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: CopyTo
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 64
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public void CopyTo(KeyValuePair<string, string>[] array, int arrayIndex)
    parameters:
    - id: array
      type: KeyValuePair{System.String,System.String}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of String, String)(), arrayIndex As Integer)
  overload: NeerCore.Data.LocalizationDictionary.CopyTo*
  nameWithType.vb: LocalizationDictionary.CopyTo(KeyValuePair(Of String, String)(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizationDictionary.CopyTo(KeyValuePair(Of System.String, System.String)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, String)(), Int32)
- uid: NeerCore.Data.LocalizationDictionary.GetEnumerator
  commentId: M:NeerCore.Data.LocalizationDictionary.GetEnumerator
  id: GetEnumerator
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: LocalizationDictionary.GetEnumerator()
  fullName: NeerCore.Data.LocalizationDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: GetEnumerator
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 78
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public IEnumerator<KeyValuePair<string, string>> GetEnumerator()
    return:
      type: IEnumerator{KeyValuePair{System.String,System.String}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, String))
  overload: NeerCore.Data.LocalizationDictionary.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizationDictionary.Remove(System.String)
  commentId: M:NeerCore.Data.LocalizationDictionary.Remove(System.String)
  id: Remove(System.String)
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: LocalizationDictionary.Remove(String)
  fullName: NeerCore.Data.LocalizationDictionary.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Remove
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 80
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public bool Remove(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function Remove(languageCode As String) As Boolean
  overload: NeerCore.Data.LocalizationDictionary.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizationDictionary.Remove(KeyValuePair{System.String,System.String})
  commentId: M:NeerCore.Data.LocalizationDictionary.Remove(KeyValuePair{System.String,System.String})
  id: Remove(KeyValuePair{System.String,System.String})
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<String, String>)
  nameWithType: LocalizationDictionary.Remove(KeyValuePair<String, String>)
  fullName: NeerCore.Data.LocalizationDictionary.Remove(KeyValuePair<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Remove
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 81
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public bool Remove(KeyValuePair<string, string> localization)
    parameters:
    - id: localization
      type: KeyValuePair{System.String,System.String}
    return:
      type: System.Boolean
    content.vb: Public Function Remove(localization As KeyValuePair(Of String, String)) As Boolean
  overload: NeerCore.Data.LocalizationDictionary.Remove*
  nameWithType.vb: LocalizationDictionary.Remove(KeyValuePair(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizationDictionary.Remove(KeyValuePair(Of System.String, System.String))
  name.vb: Remove(KeyValuePair(Of String, String))
- uid: NeerCore.Data.LocalizationDictionary.TryGetValue(System.String,System.String@)
  commentId: M:NeerCore.Data.LocalizationDictionary.TryGetValue(System.String,System.String@)
  id: TryGetValue(System.String,System.String@)
  parent: NeerCore.Data.LocalizationDictionary
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out String)
  nameWithType: LocalizationDictionary.TryGetValue(String, out String)
  fullName: NeerCore.Data.LocalizationDictionary.TryGetValue(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizationDictionary.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: TryGetValue
    path: ../src/NeerCore.Data/LocalizationDictionary.cs
    startLine: 83
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public bool TryGetValue(string languageCode, out string localization)
    parameters:
    - id: languageCode
      type: System.String
    - id: localization
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(languageCode As String, ByRef localization As String) As Boolean
  overload: NeerCore.Data.LocalizationDictionary.TryGetValue*
  nameWithType.vb: LocalizationDictionary.TryGetValue(String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizationDictionary.TryGetValue(System.String, ByRef System.String)
  name.vb: TryGetValue(String, ByRef String)
references:
- uid: NeerCore.Data
  commentId: N:NeerCore.Data
  name: NeerCore.Data
  nameWithType: NeerCore.Data
  fullName: NeerCore.Data
- uid: NeerCore.Data.LocalizationDictionary.#ctor*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.#ctor
  name: LocalizationDictionary
  nameWithType: LocalizationDictionary.LocalizationDictionary
  fullName: NeerCore.Data.LocalizationDictionary.LocalizationDictionary
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  commentId: '!:Dictionary`2'
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.Exceptions.InvalidLanguageCodeException
  commentId: T:NeerCore.Data.Exceptions.InvalidLanguageCodeException
  name: InvalidLanguageCodeException
  nameWithType: InvalidLanguageCodeException
  fullName: NeerCore.Data.Exceptions.InvalidLanguageCodeException
- uid: NeerCore.Data.LocalizationDictionary.Item*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Item
  name: Item
  nameWithType: LocalizationDictionary.Item
  fullName: NeerCore.Data.LocalizationDictionary.Item
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NeerCore.Data.LocalizationDictionary.Keys*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Keys
  name: Keys
  nameWithType: LocalizationDictionary.Keys
  fullName: NeerCore.Data.LocalizationDictionary.Keys
- uid: ICollection{System.String}
  commentId: '!:ICollection{System.String}'
  definition: ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.LocalizationDictionary.Values*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Values
  name: Values
  nameWithType: LocalizationDictionary.Values
  fullName: NeerCore.Data.LocalizationDictionary.Values
- uid: NeerCore.Data.LocalizationDictionary.Count*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Count
  name: Count
  nameWithType: LocalizationDictionary.Count
  fullName: NeerCore.Data.LocalizationDictionary.Count
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NeerCore.Data.LocalizationDictionary.IsReadOnly*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.IsReadOnly
  name: IsReadOnly
  nameWithType: LocalizationDictionary.IsReadOnly
  fullName: NeerCore.Data.LocalizationDictionary.IsReadOnly
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NeerCore.Data.LocalizationDictionary.Add*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Add
  name: Add
  nameWithType: LocalizationDictionary.Add
  fullName: NeerCore.Data.LocalizationDictionary.Add
- uid: KeyValuePair{System.String,System.String}
  commentId: '!:KeyValuePair{System.String,System.String}'
  definition: KeyValuePair`2
  name: KeyValuePair<String, String>
  nameWithType: KeyValuePair<String, String>
  fullName: KeyValuePair<System.String, System.String>
  nameWithType.vb: KeyValuePair(Of String, String)
  fullName.vb: KeyValuePair(Of System.String, System.String)
  name.vb: KeyValuePair(Of String, String)
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: KeyValuePair`2
  isExternal: true
  name: KeyValuePair<, >
  nameWithType: KeyValuePair<, >
  fullName: KeyValuePair<, >
  nameWithType.vb: KeyValuePair(Of , )
  fullName.vb: KeyValuePair(Of , )
  name.vb: KeyValuePair(Of , )
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.LocalizationDictionary.Clear*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Clear
  name: Clear
  nameWithType: LocalizationDictionary.Clear
  fullName: NeerCore.Data.LocalizationDictionary.Clear
- uid: NeerCore.Data.LocalizationDictionary.Contains*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Contains
  name: Contains
  nameWithType: LocalizationDictionary.Contains
  fullName: NeerCore.Data.LocalizationDictionary.Contains
- uid: NeerCore.Data.LocalizationDictionary.ContainsKey*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.ContainsKey
  name: ContainsKey
  nameWithType: LocalizationDictionary.ContainsKey
  fullName: NeerCore.Data.LocalizationDictionary.ContainsKey
- uid: NeerCore.Data.LocalizationDictionary.CopyTo*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.CopyTo
  name: CopyTo
  nameWithType: LocalizationDictionary.CopyTo
  fullName: NeerCore.Data.LocalizationDictionary.CopyTo
- uid: KeyValuePair{System.String,System.String}[]
  isExternal: true
  name: KeyValuePair<String, String>[]
  nameWithType: KeyValuePair<String, String>[]
  fullName: KeyValuePair<System.String, System.String>[]
  nameWithType.vb: KeyValuePair(Of String, String)()
  fullName.vb: KeyValuePair(Of System.String, System.String)()
  name.vb: KeyValuePair(Of String, String)()
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NeerCore.Data.LocalizationDictionary.GetEnumerator*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.GetEnumerator
  name: GetEnumerator
  nameWithType: LocalizationDictionary.GetEnumerator
  fullName: NeerCore.Data.LocalizationDictionary.GetEnumerator
- uid: IEnumerator{KeyValuePair{System.String,System.String}}
  commentId: '!:IEnumerator{KeyValuePair{System.String,System.String}}'
  definition: IEnumerator`1
  name: IEnumerator<KeyValuePair<String, String>>
  nameWithType: IEnumerator<KeyValuePair<String, String>>
  fullName: IEnumerator<KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, String))
  fullName.vb: IEnumerator(Of KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerator(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.LocalizationDictionary.Remove*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.Remove
  name: Remove
  nameWithType: LocalizationDictionary.Remove
  fullName: NeerCore.Data.LocalizationDictionary.Remove
- uid: NeerCore.Data.LocalizationDictionary.TryGetValue*
  commentId: Overload:NeerCore.Data.LocalizationDictionary.TryGetValue
  name: TryGetValue
  nameWithType: LocalizationDictionary.TryGetValue
  fullName: NeerCore.Data.LocalizationDictionary.TryGetValue
