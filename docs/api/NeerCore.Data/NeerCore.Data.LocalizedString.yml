### YamlMime:ManagedReference
items:
- uid: NeerCore.Data.LocalizedString
  commentId: T:NeerCore.Data.LocalizedString
  id: LocalizedString
  parent: NeerCore.Data
  children:
  - NeerCore.Data.LocalizedString.#ctor(System.Nullable{System.String})
  - NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String)
  - NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String,StringComparison)
  - NeerCore.Data.LocalizedString.Contains(System.String)
  - NeerCore.Data.LocalizedString.ContainsLocalization(System.String)
  - NeerCore.Data.LocalizedString.Empty
  - NeerCore.Data.LocalizedString.Equals(NeerCore.Data.LocalizedString)
  - NeerCore.Data.LocalizedString.Equals(System.Nullable{System.Object})
  - NeerCore.Data.LocalizedString.GetCurrentLocalization
  - NeerCore.Data.LocalizedString.GetEnumerator
  - NeerCore.Data.LocalizedString.GetHashCode
  - NeerCore.Data.LocalizedString.GetLocalization(CultureInfo)
  - NeerCore.Data.LocalizedString.GetLocalization(System.String)
  - NeerCore.Data.LocalizedString.op_Equality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  - NeerCore.Data.LocalizedString.op_Implicit(NeerCore.Data.LocalizedString)~System.String
  - NeerCore.Data.LocalizedString.op_Implicit(System.Nullable{System.String})~NeerCore.Data.LocalizedString
  - NeerCore.Data.LocalizedString.op_Inequality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  - NeerCore.Data.LocalizedString.SetLocalization(CultureInfo,System.String)
  - NeerCore.Data.LocalizedString.SetLocalization(System.String,System.String)
  - NeerCore.Data.LocalizedString.ToString
  langs:
  - csharp
  - vb
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: NeerCore.Data.LocalizedString
  type: Struct
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: LocalizedString
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 8
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: Data class that represents a localizable string.
  example: []
  syntax:
    content: public readonly struct LocalizedString
    content.vb: Public Structure LocalizedString
  implements:
  - IEnumerable{KeyValuePair{System.String,System.String}}
  - IEquatable{NeerCore.Data.LocalizedString}
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: NeerCore.Data.LocalizedString.Empty
  commentId: F:NeerCore.Data.LocalizedString.Empty
  id: Empty
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: LocalizedString.Empty
  fullName: NeerCore.Data.LocalizedString.Empty
  type: Field
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Empty
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 10
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public static readonly LocalizedString Empty
    return:
      type: NeerCore.Data.LocalizedString
    content.vb: Public Shared ReadOnly Empty As LocalizedString
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NeerCore.Data.LocalizedString.#ctor(System.Nullable{System.String})
  commentId: M:NeerCore.Data.LocalizedString.#ctor(System.Nullable{System.String})
  id: '#ctor(System.Nullable{System.String})'
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: LocalizedString(Nullable<String>)
  nameWithType: LocalizedString.LocalizedString(Nullable<String>)
  fullName: NeerCore.Data.LocalizedString.LocalizedString(System.Nullable<System.String>)
  type: Constructor
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: .ctor
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 14
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public LocalizedString(string? rawSource)
    parameters:
    - id: rawSource
      type: System.Nullable{System.String}
    content.vb: Public Sub New(rawSource As String?)
  overload: NeerCore.Data.LocalizedString.#ctor*
  nameWithType.vb: LocalizedString.LocalizedString(Nullable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NeerCore.Data.LocalizedString.LocalizedString(System.Nullable(Of System.String))
  name.vb: LocalizedString(Nullable(Of String))
- uid: NeerCore.Data.LocalizedString.Contains(System.String)
  commentId: M:NeerCore.Data.LocalizedString.Contains(System.String)
  id: Contains(System.String)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Contains(String)
  nameWithType: LocalizedString.Contains(String)
  fullName: NeerCore.Data.LocalizedString.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Contains
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 39
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: ''
  example: []
  syntax:
    content: public readonly bool Contains(string localizedValue)
    parameters:
    - id: localizedValue
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Contains(localizedValue As String) As Boolean
  overload: NeerCore.Data.LocalizedString.Contains*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.ContainsLocalization(System.String)
  commentId: M:NeerCore.Data.LocalizedString.ContainsLocalization(System.String)
  id: ContainsLocalization(System.String)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: ContainsLocalization(String)
  nameWithType: LocalizedString.ContainsLocalization(String)
  fullName: NeerCore.Data.LocalizedString.ContainsLocalization(System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: ContainsLocalization
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 44
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: Determines whether the <xref href="NeerCore.Data.LocalizedString" data-throw-if-not-resolved="false"></xref> includes an localization with the specified <code data-dev-comment-type="paramref" class="paramref">languageCode</code>.
  example: []
  syntax:
    content: public readonly bool ContainsLocalization(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
      description: Two letter ISO language code.
    return:
      type: System.Boolean
      description: True if includes, otherwise false.
    content.vb: Public Function ContainsLocalization(languageCode As String) As Boolean
  overload: NeerCore.Data.LocalizedString.ContainsLocalization*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.GetLocalization(System.String)
  commentId: M:NeerCore.Data.LocalizedString.GetLocalization(System.String)
  id: GetLocalization(System.String)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: GetLocalization(String)
  nameWithType: LocalizedString.GetLocalization(String)
  fullName: NeerCore.Data.LocalizedString.GetLocalization(System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: GetLocalization
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 50
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: ''
  example: []
  syntax:
    content: public readonly string GetLocalization(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetLocalization(languageCode As String) As String
  overload: NeerCore.Data.LocalizedString.GetLocalization*
  exceptions:
  - type: NeerCore.Exceptions.ValidationFailedException
    commentId: T:NeerCore.Exceptions.ValidationFailedException
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.GetCurrentLocalization
  commentId: M:NeerCore.Data.LocalizedString.GetCurrentLocalization
  id: GetCurrentLocalization
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: GetCurrentLocalization()
  nameWithType: LocalizedString.GetCurrentLocalization()
  fullName: NeerCore.Data.LocalizedString.GetCurrentLocalization()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: GetCurrentLocalization
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 60
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: ''
  example: []
  syntax:
    content: public readonly string GetCurrentLocalization()
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetCurrentLocalization As String
  overload: NeerCore.Data.LocalizedString.GetCurrentLocalization*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.GetLocalization(CultureInfo)
  commentId: M:NeerCore.Data.LocalizedString.GetLocalization(CultureInfo)
  id: GetLocalization(CultureInfo)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: GetLocalization(CultureInfo)
  nameWithType: LocalizedString.GetLocalization(CultureInfo)
  fullName: NeerCore.Data.LocalizedString.GetLocalization(CultureInfo)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: GetLocalization
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 68
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: ''
  example: []
  syntax:
    content: public readonly string GetLocalization(CultureInfo culture)
    parameters:
    - id: culture
      type: CultureInfo
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetLocalization(culture As CultureInfo) As String
  overload: NeerCore.Data.LocalizedString.GetLocalization*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.SetLocalization(System.String,System.String)
  commentId: M:NeerCore.Data.LocalizedString.SetLocalization(System.String,System.String)
  id: SetLocalization(System.String,System.String)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: SetLocalization(String, String)
  nameWithType: LocalizedString.SetLocalization(String, String)
  fullName: NeerCore.Data.LocalizedString.SetLocalization(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: SetLocalization
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 77
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  summary: ''
  example: []
  syntax:
    content: public readonly void SetLocalization(string languageCode, string value)
    parameters:
    - id: languageCode
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    content.vb: Public Sub SetLocalization(languageCode As String, value As String)
  overload: NeerCore.Data.LocalizedString.SetLocalization*
  exceptions:
  - type: NeerCore.Exceptions.InternalServerException
    commentId: T:NeerCore.Exceptions.InternalServerException
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.SetLocalization(CultureInfo,System.String)
  commentId: M:NeerCore.Data.LocalizedString.SetLocalization(CultureInfo,System.String)
  id: SetLocalization(CultureInfo,System.String)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: SetLocalization(CultureInfo, String)
  nameWithType: LocalizedString.SetLocalization(CultureInfo, String)
  fullName: NeerCore.Data.LocalizedString.SetLocalization(CultureInfo, System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: SetLocalization
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 85
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public readonly void SetLocalization(CultureInfo culture, string value)
    parameters:
    - id: culture
      type: CultureInfo
    - id: value
      type: System.String
    content.vb: Public Sub SetLocalization(culture As CultureInfo, value As String)
  overload: NeerCore.Data.LocalizedString.SetLocalization*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.GetEnumerator
  commentId: M:NeerCore.Data.LocalizedString.GetEnumerator
  id: GetEnumerator
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: LocalizedString.GetEnumerator()
  fullName: NeerCore.Data.LocalizedString.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: GetEnumerator
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 92
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public readonly IEnumerator<KeyValuePair<string, string>> GetEnumerator()
    return:
      type: IEnumerator{KeyValuePair{System.String,System.String}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of String, String))
  overload: NeerCore.Data.LocalizedString.GetEnumerator*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.op_Implicit(System.Nullable{System.String})~NeerCore.Data.LocalizedString
  commentId: M:NeerCore.Data.LocalizedString.op_Implicit(System.Nullable{System.String})~NeerCore.Data.LocalizedString
  id: op_Implicit(System.Nullable{System.String})~NeerCore.Data.LocalizedString
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Implicit(Nullable<String> to LocalizedString)
  nameWithType: LocalizedString.Implicit(Nullable<String> to LocalizedString)
  fullName: NeerCore.Data.LocalizedString.Implicit(System.Nullable<System.String> to NeerCore.Data.LocalizedString)
  type: Operator
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: op_Implicit
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 94
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public static implicit operator LocalizedString(string? value)
    parameters:
    - id: value
      type: System.Nullable{System.String}
    return:
      type: NeerCore.Data.LocalizedString
    content.vb: Public Shared Widening Operator CType(value As String?) As LocalizedString
  overload: NeerCore.Data.LocalizedString.op_Implicit*
  nameWithType.vb: LocalizedString.Widening(Nullable(Of String) to LocalizedString)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.LocalizedString.Widening(System.Nullable(Of System.String) to NeerCore.Data.LocalizedString)
  name.vb: Widening(Nullable(Of String) to LocalizedString)
- uid: NeerCore.Data.LocalizedString.op_Implicit(NeerCore.Data.LocalizedString)~System.String
  commentId: M:NeerCore.Data.LocalizedString.op_Implicit(NeerCore.Data.LocalizedString)~System.String
  id: op_Implicit(NeerCore.Data.LocalizedString)~System.String
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Implicit(LocalizedString to String)
  nameWithType: LocalizedString.Implicit(LocalizedString to String)
  fullName: NeerCore.Data.LocalizedString.Implicit(NeerCore.Data.LocalizedString to System.String)
  type: Operator
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: op_Implicit
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 95
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public static implicit operator string (LocalizedString localizedValue)
    parameters:
    - id: localizedValue
      type: NeerCore.Data.LocalizedString
    return:
      type: System.String
    content.vb: Public Shared Widening Operator CType(localizedValue As LocalizedString) As String
  overload: NeerCore.Data.LocalizedString.op_Implicit*
  nameWithType.vb: LocalizedString.Widening(LocalizedString to String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Data.LocalizedString.Widening(NeerCore.Data.LocalizedString to System.String)
  name.vb: Widening(LocalizedString to String)
- uid: NeerCore.Data.LocalizedString.op_Inequality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  commentId: M:NeerCore.Data.LocalizedString.op_Inequality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  id: op_Inequality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Inequality(LocalizedString, LocalizedString)
  nameWithType: LocalizedString.Inequality(LocalizedString, LocalizedString)
  fullName: NeerCore.Data.LocalizedString.Inequality(NeerCore.Data.LocalizedString, NeerCore.Data.LocalizedString)
  type: Operator
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: op_Inequality
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 97
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public static bool operator !=(LocalizedString a, LocalizedString b)
    parameters:
    - id: a
      type: NeerCore.Data.LocalizedString
    - id: b
      type: NeerCore.Data.LocalizedString
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As LocalizedString, b As LocalizedString) As Boolean
  overload: NeerCore.Data.LocalizedString.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeerCore.Data.LocalizedString.op_Equality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  commentId: M:NeerCore.Data.LocalizedString.op_Equality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  id: op_Equality(NeerCore.Data.LocalizedString,NeerCore.Data.LocalizedString)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Equality(LocalizedString, LocalizedString)
  nameWithType: LocalizedString.Equality(LocalizedString, LocalizedString)
  fullName: NeerCore.Data.LocalizedString.Equality(NeerCore.Data.LocalizedString, NeerCore.Data.LocalizedString)
  type: Operator
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: op_Equality
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 99
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public static bool operator ==(LocalizedString a, LocalizedString b)
    parameters:
    - id: a
      type: NeerCore.Data.LocalizedString
    - id: b
      type: NeerCore.Data.LocalizedString
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As LocalizedString, b As LocalizedString) As Boolean
  overload: NeerCore.Data.LocalizedString.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String)
  commentId: M:NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String)
  id: AnyLocalizationEquals(System.String)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: AnyLocalizationEquals(String)
  nameWithType: LocalizedString.AnyLocalizationEquals(String)
  fullName: NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AnyLocalizationEquals
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 105
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public readonly bool AnyLocalizationEquals(string other)
    parameters:
    - id: other
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function AnyLocalizationEquals(other As String) As Boolean
  overload: NeerCore.Data.LocalizedString.AnyLocalizationEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String,StringComparison)
  commentId: M:NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String,StringComparison)
  id: AnyLocalizationEquals(System.String,StringComparison)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: AnyLocalizationEquals(String, StringComparison)
  nameWithType: LocalizedString.AnyLocalizationEquals(String, StringComparison)
  fullName: NeerCore.Data.LocalizedString.AnyLocalizationEquals(System.String, StringComparison)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: AnyLocalizationEquals
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 106
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public readonly bool AnyLocalizationEquals(string other, StringComparison comparisonType)
    parameters:
    - id: other
      type: System.String
    - id: comparisonType
      type: StringComparison
    return:
      type: System.Boolean
    content.vb: Public Function AnyLocalizationEquals(other As String, comparisonType As StringComparison) As Boolean
  overload: NeerCore.Data.LocalizedString.AnyLocalizationEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.Equals(NeerCore.Data.LocalizedString)
  commentId: M:NeerCore.Data.LocalizedString.Equals(NeerCore.Data.LocalizedString)
  id: Equals(NeerCore.Data.LocalizedString)
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Equals(LocalizedString)
  nameWithType: LocalizedString.Equals(LocalizedString)
  fullName: NeerCore.Data.LocalizedString.Equals(NeerCore.Data.LocalizedString)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Equals
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 107
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public readonly bool Equals(LocalizedString other)
    parameters:
    - id: other
      type: NeerCore.Data.LocalizedString
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As LocalizedString) As Boolean
  overload: NeerCore.Data.LocalizedString.Equals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: NeerCore.Data.LocalizedString.Equals(System.Nullable{System.Object})
  commentId: M:NeerCore.Data.LocalizedString.Equals(System.Nullable{System.Object})
  id: Equals(System.Nullable{System.Object})
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: Equals(Nullable<Object>)
  nameWithType: LocalizedString.Equals(Nullable<Object>)
  fullName: NeerCore.Data.LocalizedString.Equals(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Equals
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 109
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public override readonly bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object?) As Boolean
  overload: NeerCore.Data.LocalizedString.Equals*
  nameWithType.vb: LocalizedString.Equals(Nullable(Of Object))
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NeerCore.Data.LocalizedString.Equals(System.Nullable(Of System.Object))
  name.vb: Equals(Nullable(Of Object))
- uid: NeerCore.Data.LocalizedString.GetHashCode
  commentId: M:NeerCore.Data.LocalizedString.GetHashCode
  id: GetHashCode
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LocalizedString.GetHashCode()
  fullName: NeerCore.Data.LocalizedString.GetHashCode()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: GetHashCode
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 110
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: NeerCore.Data.LocalizedString.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: NeerCore.Data.LocalizedString.ToString
  commentId: M:NeerCore.Data.LocalizedString.ToString
  id: ToString
  parent: NeerCore.Data.LocalizedString
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalizedString.ToString()
  fullName: NeerCore.Data.LocalizedString.ToString()
  type: Method
  source:
    remote:
      path: src/NeerCore.Data/LocalizedString.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: ToString
    path: ../src/NeerCore.Data/LocalizedString.cs
    startLine: 112
  assemblies:
  - NeerCore.Data
  namespace: NeerCore.Data
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: NeerCore.Data.LocalizedString.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NeerCore.Data
  commentId: N:NeerCore.Data
  name: NeerCore.Data
  nameWithType: NeerCore.Data
  fullName: NeerCore.Data
- uid: IEnumerable{KeyValuePair{System.String,System.String}}
  commentId: '!:IEnumerable{KeyValuePair{System.String,System.String}}'
  definition: IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: IEnumerable<KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullName.vb: IEnumerable(Of KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable{NeerCore.Data.LocalizedString}
  commentId: '!:IEquatable{NeerCore.Data.LocalizedString}'
  definition: IEquatable`1
  name: IEquatable<LocalizedString>
  nameWithType: IEquatable<LocalizedString>
  fullName: IEquatable<NeerCore.Data.LocalizedString>
  nameWithType.vb: IEquatable(Of LocalizedString)
  fullName.vb: IEquatable(Of NeerCore.Data.LocalizedString)
  name.vb: IEquatable(Of LocalizedString)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NeerCore.Data.LocalizedString
    name: LocalizedString
    nameWithType: LocalizedString
    fullName: NeerCore.Data.LocalizedString
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NeerCore.Data.LocalizedString
    name: LocalizedString
    nameWithType: LocalizedString
    fullName: NeerCore.Data.LocalizedString
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  commentId: '!:IEnumerable`1'
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable`1
  commentId: '!:IEquatable`1'
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.LocalizedString
  commentId: T:NeerCore.Data.LocalizedString
  parent: NeerCore.Data
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: NeerCore.Data.LocalizedString
- uid: NeerCore.Data.LocalizedString.#ctor*
  commentId: Overload:NeerCore.Data.LocalizedString.#ctor
  name: LocalizedString
  nameWithType: LocalizedString.LocalizedString
  fullName: NeerCore.Data.LocalizedString.LocalizedString
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.LocalizedString.Contains*
  commentId: Overload:NeerCore.Data.LocalizedString.Contains
  name: Contains
  nameWithType: LocalizedString.Contains
  fullName: NeerCore.Data.LocalizedString.Contains
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NeerCore.Data.LocalizedString.ContainsLocalization*
  commentId: Overload:NeerCore.Data.LocalizedString.ContainsLocalization
  name: ContainsLocalization
  nameWithType: LocalizedString.ContainsLocalization
  fullName: NeerCore.Data.LocalizedString.ContainsLocalization
- uid: NeerCore.Exceptions.ValidationFailedException
  commentId: T:NeerCore.Exceptions.ValidationFailedException
  isExternal: true
- uid: NeerCore.Data.LocalizedString.GetLocalization*
  commentId: Overload:NeerCore.Data.LocalizedString.GetLocalization
  name: GetLocalization
  nameWithType: LocalizedString.GetLocalization
  fullName: NeerCore.Data.LocalizedString.GetLocalization
- uid: NeerCore.Data.LocalizedString.GetCurrentLocalization*
  commentId: Overload:NeerCore.Data.LocalizedString.GetCurrentLocalization
  name: GetCurrentLocalization
  nameWithType: LocalizedString.GetCurrentLocalization
  fullName: NeerCore.Data.LocalizedString.GetCurrentLocalization
- uid: CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: CultureInfo
- uid: NeerCore.Exceptions.InternalServerException
  commentId: T:NeerCore.Exceptions.InternalServerException
  isExternal: true
- uid: NeerCore.Data.LocalizedString.SetLocalization*
  commentId: Overload:NeerCore.Data.LocalizedString.SetLocalization
  name: SetLocalization
  nameWithType: LocalizedString.SetLocalization
  fullName: NeerCore.Data.LocalizedString.SetLocalization
- uid: NeerCore.Data.LocalizedString.GetEnumerator*
  commentId: Overload:NeerCore.Data.LocalizedString.GetEnumerator
  name: GetEnumerator
  nameWithType: LocalizedString.GetEnumerator
  fullName: NeerCore.Data.LocalizedString.GetEnumerator
- uid: IEnumerator{KeyValuePair{System.String,System.String}}
  commentId: '!:IEnumerator{KeyValuePair{System.String,System.String}}'
  definition: IEnumerator`1
  name: IEnumerator<KeyValuePair<String, String>>
  nameWithType: IEnumerator<KeyValuePair<String, String>>
  fullName: IEnumerator<KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, String))
  fullName.vb: IEnumerator(Of KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerator(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.LocalizedString.op_Implicit*
  commentId: Overload:NeerCore.Data.LocalizedString.op_Implicit
  name: Implicit
  nameWithType: LocalizedString.Implicit
  fullName: NeerCore.Data.LocalizedString.Implicit
  nameWithType.vb: LocalizedString.Widening
  fullName.vb: NeerCore.Data.LocalizedString.Widening
  name.vb: Widening
- uid: NeerCore.Data.LocalizedString.op_Inequality*
  commentId: Overload:NeerCore.Data.LocalizedString.op_Inequality
  name: Inequality
  nameWithType: LocalizedString.Inequality
  fullName: NeerCore.Data.LocalizedString.Inequality
- uid: NeerCore.Data.LocalizedString.op_Equality*
  commentId: Overload:NeerCore.Data.LocalizedString.op_Equality
  name: Equality
  nameWithType: LocalizedString.Equality
  fullName: NeerCore.Data.LocalizedString.Equality
- uid: NeerCore.Data.LocalizedString.AnyLocalizationEquals*
  commentId: Overload:NeerCore.Data.LocalizedString.AnyLocalizationEquals
  name: AnyLocalizationEquals
  nameWithType: LocalizedString.AnyLocalizationEquals
  fullName: NeerCore.Data.LocalizedString.AnyLocalizationEquals
- uid: StringComparison
  commentId: '!:StringComparison'
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: StringComparison
- uid: NeerCore.Data.LocalizedString.Equals*
  commentId: Overload:NeerCore.Data.LocalizedString.Equals
  name: Equals
  nameWithType: LocalizedString.Equals
  fullName: NeerCore.Data.LocalizedString.Equals
- uid: System.Nullable{System.Object}
  commentId: '!:System.Nullable{System.Object}'
  definition: System.Nullable`1
  name: Nullable<Object>
  nameWithType: Nullable<Object>
  fullName: System.Nullable<System.Object>
  nameWithType.vb: Nullable(Of Object)
  fullName.vb: System.Nullable(Of System.Object)
  name.vb: Nullable(Of Object)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Data.LocalizedString.GetHashCode*
  commentId: Overload:NeerCore.Data.LocalizedString.GetHashCode
  name: GetHashCode
  nameWithType: LocalizedString.GetHashCode
  fullName: NeerCore.Data.LocalizedString.GetHashCode
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NeerCore.Data.LocalizedString.ToString*
  commentId: Overload:NeerCore.Data.LocalizedString.ToString
  name: ToString
  nameWithType: LocalizedString.ToString
  fullName: NeerCore.Data.LocalizedString.ToString
