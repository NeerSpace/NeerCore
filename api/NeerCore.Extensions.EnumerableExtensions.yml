### YamlMime:ManagedReference
items:
- uid: NeerCore.Extensions.EnumerableExtensions
  commentId: T:NeerCore.Extensions.EnumerableExtensions
  id: EnumerableExtensions
  parent: NeerCore.Extensions
  children:
  - NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  - NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  - NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,IEnumerable{``0}@)
  - NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,IEnumerable{``0}@)
  - NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,IEnumerable{``0}@)
  - NeerCore.Extensions.EnumerableExtensions.FirstOr404``1(IEnumerable{``0},Func{``0,System.Boolean},System.Nullable{System.String})
  - NeerCore.Extensions.EnumerableExtensions.FirstOr404``1(IEnumerable{``0},System.Nullable{System.String})
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: NeerCore.Extensions.EnumerableExtensions
  type: Class
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: EnumerableExtensions
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 4
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  syntax:
    content: 'public static class EnumerableExtensions : object'
    content.vb: >-
      Public Module EnumerableExtensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NeerCore.Extensions.EnumerableExtensions.FirstOr404``1(IEnumerable{``0},System.Nullable{System.String})
  commentId: M:NeerCore.Extensions.EnumerableExtensions.FirstOr404``1(IEnumerable{``0},System.Nullable{System.String})
  id: FirstOr404``1(IEnumerable{``0},System.Nullable{System.String})
  isExtensionMethod: true
  parent: NeerCore.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: FirstOr404<TSource>(IEnumerable<TSource>, Nullable<String>)
  nameWithType: EnumerableExtensions.FirstOr404<TSource>(IEnumerable<TSource>, Nullable<String>)
  fullName: NeerCore.Extensions.EnumerableExtensions.FirstOr404<TSource>(IEnumerable<TSource>, System.Nullable<System.String>)
  type: Method
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FirstOr404
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 16
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  summary: "\nReturns the first element of a sequence, or throws a\n<xref href=\"NeerCore.Exceptions.NotFoundException\" data-throw-if-not-resolved=\"false\"></xref> if the sequence contains no elements.\n"
  example: []
  syntax:
    content: public static TSource FirstOr404<TSource>(this IEnumerable<TSource> source, string? errorMessage = null)
    parameters:
    - id: source
      type: IEnumerable{{TSource}}
      description: The <see cref="!:IEnumerable&lt;T>"></see> to return the first element of.
    - id: errorMessage
      type: System.Nullable{System.String}
      description: The error message that will be threw instead of the default one when an exception occurs.
    typeParameters:
    - id: TSource
      description: The type of the elements of <code data-dev-comment-type="paramref" class="paramref">source</code>.
    return:
      type: '{TSource}'
      description: Found entity or throws 404 exception.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOr404(Of TSource)(source As IEnumerable(Of TSource), errorMessage As String? = Nothing) As TSource
  overload: NeerCore.Extensions.EnumerableExtensions.FirstOr404*
  exceptions:
  - type: NeerCore.Exceptions.NotFoundException
    commentId: T:NeerCore.Exceptions.NotFoundException
    description: <code data-dev-comment-type="paramref" class="paramref">source</code> is empty.
  nameWithType.vb: EnumerableExtensions.FirstOr404(Of TSource)(IEnumerable(Of TSource), Nullable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Extensions.EnumerableExtensions.FirstOr404(Of TSource)(IEnumerable(Of TSource), System.Nullable(Of System.String))
  name.vb: FirstOr404(Of TSource)(IEnumerable(Of TSource), Nullable(Of String))
- uid: NeerCore.Extensions.EnumerableExtensions.FirstOr404``1(IEnumerable{``0},Func{``0,System.Boolean},System.Nullable{System.String})
  commentId: M:NeerCore.Extensions.EnumerableExtensions.FirstOr404``1(IEnumerable{``0},Func{``0,System.Boolean},System.Nullable{System.String})
  id: FirstOr404``1(IEnumerable{``0},Func{``0,System.Boolean},System.Nullable{System.String})
  isExtensionMethod: true
  parent: NeerCore.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: FirstOr404<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Nullable<String>)
  nameWithType: EnumerableExtensions.FirstOr404<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Nullable<String>)
  fullName: NeerCore.Extensions.EnumerableExtensions.FirstOr404<TSource>(IEnumerable<TSource>, Func<TSource, System.Boolean>, System.Nullable<System.String>)
  type: Method
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: FirstOr404
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 23
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  example: []
  syntax:
    content: public static TSource FirstOr404<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate, string? errorMessage = null)
    parameters:
    - id: source
      type: IEnumerable{{TSource}}
    - id: predicate
      type: Func{{TSource},System.Boolean}
      description: A function to test each element for a condition.
    - id: errorMessage
      type: System.Nullable{System.String}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOr404(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean), errorMessage As String? = Nothing) As TSource
  overload: NeerCore.Extensions.EnumerableExtensions.FirstOr404*
  nameWithType.vb: EnumerableExtensions.FirstOr404(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Nullable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Extensions.EnumerableExtensions.FirstOr404(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, System.Boolean), System.Nullable(Of System.String))
  name.vb: FirstOr404(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Nullable(Of String))
- uid: NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,IEnumerable{``0}@)
  commentId: M:NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,IEnumerable{``0}@)
  id: Deconstruct``1(IList{``0},``0@,IEnumerable{``0}@)
  isExtensionMethod: true
  parent: NeerCore.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Deconstruct<T>(IList<T>, out T, out IEnumerable<T>)
  nameWithType: EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out IEnumerable<T>)
  fullName: NeerCore.Extensions.EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Deconstruct
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 36
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  syntax:
    content: public static void Deconstruct<T>(this IList<T> seq, out T first, out IEnumerable<T> rest)
    parameters:
    - id: seq
      type: IList{{T}}
    - id: first
      type: '{T}'
    - id: rest
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Deconstruct(Of T)(seq As IList(Of T), ByRef first As T, ByRef rest As IEnumerable(Of T))
  overload: NeerCore.Extensions.EnumerableExtensions.Deconstruct*
  nameWithType.vb: EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Extensions.EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef IEnumerable(Of T))
  name.vb: Deconstruct(Of T)(IList(Of T), ByRef T, ByRef IEnumerable(Of T))
- uid: NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,IEnumerable{``0}@)
  commentId: M:NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,IEnumerable{``0}@)
  id: Deconstruct``1(IList{``0},``0@,``0@,IEnumerable{``0}@)
  isExtensionMethod: true
  parent: NeerCore.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Deconstruct<T>(IList<T>, out T, out T, out IEnumerable<T>)
  nameWithType: EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out IEnumerable<T>)
  fullName: NeerCore.Extensions.EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Deconstruct
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 44
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  syntax:
    content: public static void Deconstruct<T>(this IList<T> seq, out T first, out T second, out IEnumerable<T> rest)
    parameters:
    - id: seq
      type: IList{{T}}
    - id: first
      type: '{T}'
    - id: second
      type: '{T}'
    - id: rest
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Deconstruct(Of T)(seq As IList(Of T), ByRef first As T, ByRef second As T, ByRef rest As IEnumerable(Of T))
  overload: NeerCore.Extensions.EnumerableExtensions.Deconstruct*
  nameWithType.vb: EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Extensions.EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef IEnumerable(Of T))
  name.vb: Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef IEnumerable(Of T))
- uid: NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,IEnumerable{``0}@)
  commentId: M:NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,IEnumerable{``0}@)
  id: Deconstruct``1(IList{``0},``0@,``0@,``0@,IEnumerable{``0}@)
  isExtensionMethod: true
  parent: NeerCore.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Deconstruct<T>(IList<T>, out T, out T, out T, out IEnumerable<T>)
  nameWithType: EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out T, out IEnumerable<T>)
  fullName: NeerCore.Extensions.EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out T, out IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Deconstruct
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 53
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  syntax:
    content: public static void Deconstruct<T>(this IList<T> seq, out T first, out T second, out T third, out IEnumerable<T> rest)
    parameters:
    - id: seq
      type: IList{{T}}
    - id: first
      type: '{T}'
    - id: second
      type: '{T}'
    - id: third
      type: '{T}'
    - id: rest
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Deconstruct(Of T)(seq As IList(Of T), ByRef first As T, ByRef second As T, ByRef third As T, ByRef rest As IEnumerable(Of T))
  overload: NeerCore.Extensions.EnumerableExtensions.Deconstruct*
  nameWithType.vb: EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Extensions.EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
  name.vb: Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
- uid: NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  commentId: M:NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  id: Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  isExtensionMethod: true
  parent: NeerCore.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Deconstruct<T>(IList<T>, out T, out T, out T, out T, out IEnumerable<T>)
  nameWithType: EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out T, out T, out IEnumerable<T>)
  fullName: NeerCore.Extensions.EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out T, out T, out IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Deconstruct
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 63
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  syntax:
    content: public static void Deconstruct<T>(this IList<T> seq, out T first, out T second, out T third, out T fourth, out IEnumerable<T> rest)
    parameters:
    - id: seq
      type: IList{{T}}
    - id: first
      type: '{T}'
    - id: second
      type: '{T}'
    - id: third
      type: '{T}'
    - id: fourth
      type: '{T}'
    - id: rest
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Deconstruct(Of T)(seq As IList(Of T), ByRef first As T, ByRef second As T, ByRef third As T, ByRef fourth As T, ByRef rest As IEnumerable(Of T))
  overload: NeerCore.Extensions.EnumerableExtensions.Deconstruct*
  nameWithType.vb: EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Extensions.EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
  name.vb: Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
- uid: NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  commentId: M:NeerCore.Extensions.EnumerableExtensions.Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  id: Deconstruct``1(IList{``0},``0@,``0@,``0@,``0@,``0@,IEnumerable{``0}@)
  isExtensionMethod: true
  parent: NeerCore.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Deconstruct<T>(IList<T>, out T, out T, out T, out T, out T, out IEnumerable<T>)
  nameWithType: EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out T, out T, out T, out IEnumerable<T>)
  fullName: NeerCore.Extensions.EnumerableExtensions.Deconstruct<T>(IList<T>, out T, out T, out T, out T, out T, out IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/NeerCore/Extensions/EnumerableExtensions.cs
      branch: v2.0.0
      repo: https://github.com/NeerSpace/NeerCore.git
    id: Deconstruct
    path: src/NeerCore/Extensions/EnumerableExtensions.cs
    startLine: 74
  assemblies:
  - NeerCore
  namespace: NeerCore.Extensions
  syntax:
    content: public static void Deconstruct<T>(this IList<T> seq, out T first, out T second, out T third, out T fourth, out T fifth, out IEnumerable<T> rest)
    parameters:
    - id: seq
      type: IList{{T}}
    - id: first
      type: '{T}'
    - id: second
      type: '{T}'
    - id: third
      type: '{T}'
    - id: fourth
      type: '{T}'
    - id: fifth
      type: '{T}'
    - id: rest
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Deconstruct(Of T)(seq As IList(Of T), ByRef first As T, ByRef second As T, ByRef third As T, ByRef fourth As T, ByRef fifth As T, ByRef rest As IEnumerable(Of T))
  overload: NeerCore.Extensions.EnumerableExtensions.Deconstruct*
  nameWithType.vb: EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NeerCore.Extensions.EnumerableExtensions.Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
  name.vb: Deconstruct(Of T)(IList(Of T), ByRef T, ByRef T, ByRef T, ByRef T, ByRef T, ByRef IEnumerable(Of T))
references:
- uid: NeerCore.Extensions
  commentId: N:NeerCore.Extensions
  name: NeerCore.Extensions
  nameWithType: NeerCore.Extensions
  fullName: NeerCore.Extensions
- uid: NeerCore.Exceptions.NotFoundException
  commentId: T:NeerCore.Exceptions.NotFoundException
  parent: NeerCore.Exceptions
  name: NotFoundException
  nameWithType: NotFoundException
  fullName: NeerCore.Exceptions.NotFoundException
- uid: NeerCore.Extensions.EnumerableExtensions.FirstOr404*
  commentId: Overload:NeerCore.Extensions.EnumerableExtensions.FirstOr404
  name: FirstOr404
  nameWithType: EnumerableExtensions.FirstOr404
  fullName: NeerCore.Extensions.EnumerableExtensions.FirstOr404
- uid: IEnumerable{{TSource}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: NeerCore.Exceptions
  commentId: N:NeerCore.Exceptions
  name: NeerCore.Exceptions
  nameWithType: NeerCore.Exceptions
  fullName: NeerCore.Exceptions
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: Func{{TSource},System.Boolean}
  commentId: '!:Func{``0,System.Boolean}'
  definition: Func`2
  name: Func<TSource, Boolean>
  nameWithType: Func<TSource, Boolean>
  fullName: Func<TSource, System.Boolean>
  nameWithType.vb: Func(Of TSource, Boolean)
  fullName.vb: Func(Of TSource, System.Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  commentId: '!:Func`2'
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NeerCore.Extensions.EnumerableExtensions.Deconstruct*
  commentId: Overload:NeerCore.Extensions.EnumerableExtensions.Deconstruct
  name: Deconstruct
  nameWithType: EnumerableExtensions.Deconstruct
  fullName: NeerCore.Extensions.EnumerableExtensions.Deconstruct
- uid: IList{{T}}
  commentId: '!:IList{``0}'
  definition: IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
